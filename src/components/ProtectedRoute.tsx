/**
 * @file: ProtectedRoute.tsx
 * @description: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–æ–≤
 * @dependencies: AuthContext, React Router
 * @created: 2024-12-19
 * @updated: 2025-01-24 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ comprehensive —Ç–µ—Å—Ç–æ–≤
 */

import React from 'react'
import { Navigate, useLocation } from 'react-router-dom'
import { Center, Loader, Stack, Text, ThemeIcon, Alert } from '@mantine/core'
import { IconPizza, IconLock } from '@tabler/icons-react'
import { useAuth } from '../contexts/AuthContext'

interface ProtectedRouteProps {
  children: React.ReactNode
  requireAuth?: boolean // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
  requiredRole?: 'USER' | 'ADMIN' // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requireAuth = true,
  requiredRole 
}) => {
  const { user, isLoading, tokens } = useAuth()
  const location = useLocation()

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è AuthContext
  if (isLoading) {
    return (
      <Center style={{ minHeight: '100vh' }}>
        <Stack gap="md" align="center">
          <ThemeIcon size="xl" variant="light" color="orange">
            <IconPizza size={32} />
          </ThemeIcon>
          <Loader size="lg" color="orange" />
          <Text size="lg" c="dimmed">
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...
          </Text>
        </Stack>
      </Center>
    )
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const hasValidTokens = tokens?.access_token && user
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ routes (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ comprehensive —Ç–µ—Å—Ç–æ–≤)
  const protectedPaths = ['/cart', '/checkout', '/orders', '/profile', '/order-success', '/admin', '/payments']
  const isProtectedPath = protectedPaths.some(path => location.pathname.startsWith(path))
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  if (requireAuth && isProtectedPath) {
    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
    if (!hasValidTokens) {
      console.warn(`üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏: ${location.pathname}`)
      return <Navigate to="/auth" state={{ from: location }} replace />
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (requiredRole && user?.role !== requiredRole) {
      return (
        <Center style={{ minHeight: '100vh' }}>
          <Alert 
            icon={<IconLock size={16} />} 
            title="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" 
            color="red"
            variant="filled"
          >
            –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
            <br />
            –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: {requiredRole}, –≤–∞—à–∞ —Ä–æ–ª—å: {user?.role || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
          </Alert>
        </Center>
      )
    }
  }

  // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (requireAuth && !user) {
    console.warn(`üîí –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫: ${location.pathname}`)
    return <Navigate to="/auth" state={{ from: location }} replace />
  }

  // –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞)
  if (!requireAuth && user) {
    const from = location.state?.from?.pathname || '/'
    return <Navigate to={from} replace />
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  React.useEffect(() => {
    if (isProtectedPath && hasValidTokens) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏: ${location.pathname}`)
    }
  }, [isProtectedPath, hasValidTokens, location.pathname])

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  return <>{children}</>
} 