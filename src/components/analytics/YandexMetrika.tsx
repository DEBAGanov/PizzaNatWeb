/**
 * @file: YandexMetrika.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–æ–π
 * @dependencies: React, –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞
 * @created: 2025-01-24
 */

import { useEffect } from 'react'

interface YandexMetrikaProps {
  counterId: string
  webvisor?: boolean
  clickmap?: boolean
  trackLinks?: boolean
  accurateTrackBounce?: boolean
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å–∞

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
export interface EcommerceProduct {
  id: string
  name: string
  category?: string
  brand?: string
  variant?: string
  price: number
  quantity?: number
  position?: number
  list?: string
}

interface EcommerceActionField {
  id?: string
  affiliation?: string
  revenue?: number
  tax?: number
  shipping?: number
  coupon?: string
  list?: string
  step?: number
  option?: string
}

interface EcommerceData {
  currencyCode: string
  [actionType: string]: any
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ym –∏ dataLayer
declare global {
  interface Window {
    ym: (id: string, method: string, ...args: any[]) => void
    dataLayer: Array<{
      ecommerce?: EcommerceData
    }>
  }
}

export function YandexMetrika({ 
  counterId,
  webvisor = true,
  clickmap = true,
  trackLinks = true,
  accurateTrackBounce = true
}: YandexMetrikaProps) {
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window === 'undefined') {
      return
    }
    
    // –í development —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (import.meta.env.DEV) {
      console.log('üîç –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞: Development —Ä–µ–∂–∏–º - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
      return
    }

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const script = document.createElement('script')
    script.innerHTML = `
      (function(m,e,t,r,i,k,a){
        m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
        m[i].l=1*new Date();
        for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
        k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)
      })(window, document,'script','https://mc.yandex.ru/metrika/tag.js?id=${counterId}', 'ym');

      ym(${counterId}, 'init', {
        ssr: true,
        webvisor: ${webvisor},
        clickmap: ${clickmap},
        ecommerce: "dataLayer",
        accurateTrackBounce: ${accurateTrackBounce},
        trackLinks: ${trackLinks}
      });
    `
    
    document.head.appendChild(script)

    // –î–æ–±–∞–≤–ª—è–µ–º noscript –≤–µ—Ä—Å–∏—é
    const noscript = document.createElement('noscript')
    noscript.innerHTML = `
      <div>
        <img src="https://mc.yandex.ru/watch/${counterId}" 
             style="position:absolute; left:-9999px;" 
             alt="" />
      </div>
    `
    document.body.appendChild(noscript)

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (document.head.contains(script)) {
        document.head.removeChild(script)
      }
      if (document.body.contains(noscript)) {
        document.body.removeChild(noscript)
      }
    }
  }, [counterId, webvisor, clickmap, trackLinks, accurateTrackBounce])

  return null
}

// –•—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É
export const useYandexMetrika = (counterId: string) => {
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
  const reachGoal = (target: string, params?: object) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(counterId, 'reachGoal', target, params)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–∑–∏—Ç–∞
  const params = (parameters: object) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(counterId, 'params', parameters)
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const userParams = (parameters: object) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(counterId, 'userParams', parameters)
    }
  }

  // –ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å–∞
  const sendEcommerceEvent = (ecommerceData: EcommerceData) => {
    if (typeof window !== 'undefined' && window.dataLayer) {
      window.dataLayer.push({ ecommerce: ecommerceData })
      console.log('üìä Yandex Ecommerce:', ecommerceData)
    }
  }

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ (detail view)
  const trackProductView = (product: EcommerceProduct, list?: string) => {
    // –¶–µ–ª—å –≤ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ
    reachGoal('PRODUCT_VIEW', {
      product_id: product.id,
      product_name: product.name,
      category: product.category,
      price: product.price
    })
    
    // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –Ø–Ω–¥–µ–∫—Å–∞
    sendEcommerceEvent({
      currencyCode: "RUB",
      detail: {
        products: [{
          id: product.id,
          name: product.name,
          price: product.price,
          brand: product.brand || "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞",
          category: product.category || "–ü—Ä–æ–¥—É–∫—Ü–∏—è",
          variant: product.variant,
          list: list || "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
          position: product.position || 1
        }]
      }
    })
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const trackAddToCart = (product: EcommerceProduct, list?: string) => {
    // –¶–µ–ª—å –≤ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ
    reachGoal('ADD_TO_CART', {
      product_id: product.id,
      product_name: product.name,
      quantity: product.quantity,
      price: product.price
    })
    
    // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –Ø–Ω–¥–µ–∫—Å–∞
    sendEcommerceEvent({
      currencyCode: "RUB",
      add: {
        products: [{
          id: product.id,
          name: product.name,
          price: product.price,
          brand: product.brand || "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞",
          category: product.category || "–ü—Ä–æ–¥—É–∫—Ü–∏—è",
          variant: product.variant,
          quantity: product.quantity || 1,
          list: list || "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
          position: product.position || 1
        }]
      }
    })
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const trackRemoveFromCart = (product: EcommerceProduct, list?: string) => {
    // –¶–µ–ª—å –≤ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ
    reachGoal('REMOVE_FROM_CART', {
      product_id: product.id,
      product_name: product.name,
      quantity: product.quantity,
      price: product.price
    })
    
    // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –Ø–Ω–¥–µ–∫—Å–∞
    sendEcommerceEvent({
      currencyCode: "RUB",
      remove: {
        products: [{
          id: product.id,
          name: product.name,
          price: product.price,
          brand: product.brand || "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞",
          category: product.category || "–ü—Ä–æ–¥—É–∫—Ü–∏—è",
          variant: product.variant,
          quantity: product.quantity || 1,
          list: list || "–ö–æ—Ä–∑–∏–Ω–∞",
          position: product.position || 1
        }]
      }
    })
  }

  // –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (checkout step)
  const trackCheckoutStart = (products: EcommerceProduct[], step: number = 1) => {
    reachGoal('CHECKOUT_START', {
      items_count: products.length,
      total_value: products.reduce((sum, p) => sum + (p.price * (p.quantity || 1)), 0)
    })
    
    sendEcommerceEvent({
      currencyCode: "RUB",
      checkout: {
        actionField: { step: step },
        products: products.map(product => ({
          id: product.id,
          name: product.name,
          price: product.price,
          brand: product.brand || "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞",
          category: product.category || "–ü—Ä–æ–¥—É–∫—Ü–∏—è",
          variant: product.variant,
          quantity: product.quantity || 1
        }))
      }
    })
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
  const trackPurchase = (orderId: string, products: EcommerceProduct[], actionField?: Partial<EcommerceActionField>) => {
    const totalRevenue = actionField?.revenue || products.reduce((sum, p) => sum + (p.price * (p.quantity || 1)), 0)
    
    // –¶–µ–ª—å –≤ –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–µ
    reachGoal('ORDER_COMPLETE', {
      order_id: orderId,
      total_amount: totalRevenue,
      items_count: products.length
    })

    // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –Ø–Ω–¥–µ–∫—Å–∞
    sendEcommerceEvent({
      currencyCode: "RUB",
      purchase: {
        actionField: {
          id: orderId,
          affiliation: actionField?.affiliation || "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞ - –î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã",
          revenue: totalRevenue,
          tax: actionField?.tax,
          shipping: actionField?.shipping,
          coupon: actionField?.coupon
        },
        products: products.map(product => ({
          id: product.id,
          name: product.name,
          price: product.price,
          brand: product.brand || "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞",
          category: product.category || "–ü—Ä–æ–¥—É–∫—Ü–∏—è",
          variant: product.variant,
          quantity: product.quantity || 1
        }))
      }
    })
  }

  const trackDeliveryCalculation = (address: string, cost: number, zone: string) => {
    reachGoal('DELIVERY_CALCULATED', {
      delivery_address: address,
      delivery_cost: cost,
      delivery_zone: zone
    })
  }

  const trackPaymentMethod = (method: 'cash' | 'card' | 'sbp') => {
    reachGoal('PAYMENT_METHOD_SELECTED', {
      payment_method: method
    })
  }

  return {
    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∏
    reachGoal,
    params,
    userParams,
    
    // –ú–µ—Ç–æ–¥—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å–∞)
    trackProductView,
    trackAddToCart,
    trackRemoveFromCart,
    trackCheckoutStart,
    trackPurchase,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏
    trackDeliveryCalculation,
    trackPaymentMethod,
    
    // –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ecommerce –¥–∞–Ω–Ω—ã—Ö
    sendEcommerceEvent
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ App.tsx
interface YandexMetrikaProviderProps {
  counterId: string
  children: React.ReactNode
}

export function YandexMetrikaProvider({ counterId, children }: YandexMetrikaProviderProps) {
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º dataLayer –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    if (typeof window !== 'undefined') {
      window.dataLayer = window.dataLayer || []
    }
  }, [])

  return (
    <>
      <YandexMetrika counterId={counterId} />
      {children}
    </>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è)
export function YandexWebmaster({ verificationCode }: { verificationCode: string }) {
  useEffect(() => {
    if (typeof document !== 'undefined') {
      const meta = document.createElement('meta')
      meta.name = 'yandex-verification'
      meta.content = verificationCode
      document.head.appendChild(meta)

      return () => {
        if (document.head.contains(meta)) {
          document.head.removeChild(meta)
        }
      }
    }
  }, [verificationCode])

  return null
}