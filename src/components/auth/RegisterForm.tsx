/**
 * @file: RegisterForm.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @dependencies: AuthContext, authApi, Mantine forms
 * @created: 2024-12-19
 */

import React, { useState } from 'react'
import {
  Paper,
  Title,
  Text,
  TextInput,
  PasswordInput,
  Button,
  Stack,
  Alert,
  Group,
  Anchor,
  Checkbox,
  Divider,
  Box
} from '@mantine/core'
import { useForm } from '@mantine/form'
import { notifications } from '@mantine/notifications'
import { IconUser, IconMail, IconPhone, IconInfoCircle, IconArrowLeft } from '@tabler/icons-react'
import { useAuth } from '../../contexts/AuthContext'
import type { RegisterRequest } from '../../types/auth'

interface RegisterFormProps {
  onBack?: () => void
  onSuccess?: () => void
  onSwitchToLogin?: () => void
}

interface FormValues {
  username: string
  email: string
  phone: string
  password: string
  confirmPassword: string
  agreeToTerms: boolean
}

export const RegisterForm: React.FC<RegisterFormProps> = ({ 
  onBack, 
  onSuccess, 
  onSwitchToLogin 
}) => {
  const { register } = useAuth()
  const [isLoading, setIsLoading] = useState(false)

  // –§–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const form = useForm<FormValues>({
    initialValues: {
      username: '',
      email: '',
      phone: '',
      password: '',
      confirmPassword: '',
      agreeToTerms: false
    },
    validate: {
      username: (value) => {
        if (!value?.trim()) return '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        if (value.trim().length < 2) return '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
        if (value.trim().length > 50) return '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤'
        return null
      },
      email: (value) => {
        if (!value?.trim()) return 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(value)) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        return null
      },
      phone: (value) => {
        if (!value?.trim()) return '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const normalizedPhone = value.replace(/\D/g, '')
        if (normalizedPhone.length < 10) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        if (normalizedPhone.length > 12) return '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        return null
      },
      password: (value) => {
        if (!value) return '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        if (value.length < 6) return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
        if (value.length > 100) return '–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤'
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
        const hasUpperCase = /[A-Z]/.test(value)
        const hasLowerCase = /[a-z]/.test(value)
        const hasNumbers = /\d/.test(value)
        
        if (!hasUpperCase || !hasLowerCase || !hasNumbers) {
          return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã'
        }
        
        return null
      },
      confirmPassword: (value, values) => {
        if (!value) return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        if (value !== values.password) return '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
        return null
      },
      agreeToTerms: (value) => {
        if (!value) return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
        return null
      }
    }
  })

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const normalizePhoneNumber = (phone: string): string => {
    const cleaned = phone.replace(/\D/g, '')
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleaned.startsWith('8')) {
      return '7' + cleaned.slice(1)
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 9 (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã), –¥–æ–±–∞–≤–ª—è–µ–º 7
    if (cleaned.startsWith('9') && cleaned.length === 10) {
      return '7' + cleaned
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (cleaned.startsWith('7')) {
      return cleaned
    }
    
    return cleaned
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const handleRegister = async (values: FormValues) => {
    try {
      setIsLoading(true)
      
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const registerData: RegisterRequest = {
        username: values.email.trim().toLowerCase(),
        fullName: values.username.trim(),
        phoneNumber: normalizePhoneNumber(values.phone),
        password: values.password
      }
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
        ...registerData,
        password: '[–°–ö–†–´–¢–û]'
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ AuthContext
      await register(registerData)
      
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
      
      notifications.show({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        color: 'green'
      })
      
      onSuccess?.()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      
      if (error instanceof Error) {
        errorMessage = error.message
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (errorMessage.includes('email')) {
        form.setFieldError('email', 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
      } else if (errorMessage.includes('phone')) {
        form.setFieldError('phone', '–¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
      } else {
        notifications.show({
          title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          message: errorMessage,
          color: 'red'
        })
      }
    } finally {
      setIsLoading(false)
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatPhoneDisplay = (value: string) => {
    const cleaned = value.replace(/\D/g, '')
    
    if (cleaned.length === 0) return ''
    if (cleaned.length <= 1) return `+${cleaned}`
    if (cleaned.length <= 4) return `+${cleaned.slice(0, 1)} (${cleaned.slice(1)}`
    if (cleaned.length <= 7) return `+${cleaned.slice(0, 1)} (${cleaned.slice(1, 4)}) ${cleaned.slice(4)}`
    if (cleaned.length <= 9) return `+${cleaned.slice(0, 1)} (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`
    return `+${cleaned.slice(0, 1)} (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7, 9)}-${cleaned.slice(9, 11)}`
  }

  return (
    <Paper p="xl" radius="md" withBorder>
      <Stack gap="lg">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div>
          <Title order={2} ta="center">
            –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
          </Title>
          <Text c="dimmed" size="sm" ta="center" mt="xs">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          </Text>
        </div>

        <Divider />

        {/* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <form onSubmit={form.onSubmit(handleRegister)}>
          <Stack gap="md">
            {/* –ò–º—è */}
            <TextInput
              label="–ò–º—è"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              leftSection={<IconUser size={16} />}
              required
              {...form.getInputProps('username')}
            />

            {/* Email */}
            <TextInput
              label="Email"
              placeholder="example@email.com"
              leftSection={<IconMail size={16} />}
              type="email"
              required
              {...form.getInputProps('email')}
            />

            {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
            <TextInput
              label="–¢–µ–ª–µ—Ñ–æ–Ω"
              placeholder="+7 (999) 123-45-67"
              leftSection={<IconPhone size={16} />}
              required
              {...form.getInputProps('phone')}
              onChange={(event) => {
                const formatted = formatPhoneDisplay(event.currentTarget.value)
                form.setFieldValue('phone', formatted)
              }}
            />

            {/* –ü–∞—Ä–æ–ª—å */}
            <PasswordInput
              label="–ü–∞—Ä–æ–ª—å"
              placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
              required
              {...form.getInputProps('password')}
            />

            {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
            <PasswordInput
              label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              required
              {...form.getInputProps('confirmPassword')}
            />

            {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é */}
            <Alert
              icon={<IconInfoCircle size={16} />}
              title="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é"
              color="blue"
              variant="light"
            >
              <Text size="sm">
                ‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
                <br />
                ‚Ä¢ –ó–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
                <br />
                ‚Ä¢ –¶–∏—Ñ—Ä—ã
              </Text>
            </Alert>

            {/* –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ */}
            <Checkbox
              label={
                <Text size="sm">
                  –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{' '}
                  <Anchor href="#" size="sm">
                    —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                  </Anchor>
                  {' '}–∏{' '}
                  <Anchor href="#" size="sm">
                    –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                  </Anchor>
                </Text>
              }
              required
              {...form.getInputProps('agreeToTerms', { type: 'checkbox' })}
            />

            {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            <Button
              type="submit"
              size="lg"
              fullWidth
              loading={isLoading}
              disabled={!form.isValid() || !form.values.agreeToTerms}
            >
              –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </Button>
          </Stack>
        </form>

        <Divider />

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <Stack gap="sm">
          {/* –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ö–æ–¥—É */}
          <Group justify="center">
            <Text size="sm" c="dimmed">
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?
            </Text>
            {onSwitchToLogin && (
              <Anchor
                component="button"
                type="button"
                size="sm"
                onClick={onSwitchToLogin}
                disabled={isLoading}
              >
                –í–æ–π—Ç–∏
              </Anchor>
            )}
          </Group>

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
          {onBack && (
            <Button
              variant="subtle"
              color="gray"
              leftSection={<IconArrowLeft size={16} />}
              onClick={onBack}
              disabled={isLoading}
            >
              –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞
            </Button>
          )}
        </Stack>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Box>
          <Text size="xs" c="dimmed" ta="center">
            –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§
          </Text>
        </Box>
      </Stack>
    </Paper>
  )
} 