/**
 * @file: TelegramAuthForm.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PizzaNat API
 * @dependencies: AuthContext, Mantine UI, Tabler Icons
 * @created: 2025-01-07
 * @updated: 2025-01-20
 */

import React, { useState, useEffect } from 'react'
import {
  Paper,
  Stack,
  Group,
  Title,
  Text,
  Button,
  Loader,
  Center,
  ThemeIcon,
  Divider,
  Alert,
  CopyButton,
  ActionIcon,
  Tooltip,
  Progress,
  Badge
} from '@mantine/core'
import {
  IconBrandTelegram,
  IconInfoCircle,
  IconCopy,
  IconCheck,
  IconExternalLink,
  IconRefresh
} from '@tabler/icons-react'
import { notifications } from '@mantine/notifications'
import { useAuth } from '../../contexts/AuthContext'

interface TelegramAuthFormProps {
  onBack?: () => void
  onSuccess?: () => void
}

export const TelegramAuthForm: React.FC<TelegramAuthFormProps> = ({ onBack, onSuccess }) => {
  const { initTelegramAuth, checkTelegramStatus } = useAuth()
  const [isLoading, setIsLoading] = useState(false)
  const [telegramUrl, setTelegramUrl] = useState<string | null>(null)
  const [authToken, setAuthToken] = useState<string | null>(null)
  const [isPolling, setIsPolling] = useState(false)
  const [pollAttempts, setPollAttempts] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [initAttempted, setInitAttempted] = useState(false)
  const [isRateLimited, setIsRateLimited] = useState(false)
  const [retryCountdown, setRetryCountdown] = useState(0)

  const MAX_POLL_ATTEMPTS = 60 // 5 –º–∏–Ω—É—Ç (60 * 5 —Å–µ–∫—É–Ω–¥)
  const POLL_INTERVAL = 5000 // 5 —Å–µ–∫—É–Ω–¥
  const RATE_LIMIT_RETRY_DELAY = 60 // 60 —Å–µ–∫—É–Ω–¥

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const initTelegramAuthHandler = async () => {
    try {
      setIsLoading(true)
      setError(null)

      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
      const response = await initTelegramAuth()

      console.log('üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç initTelegramAuth:', response)
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:', {
        hasAuthToken: !!response.authToken,
        hasTelegramBotUrl: !!response.telegramBotUrl,
        authTokenValue: response.authToken,
        telegramBotUrlValue: response.telegramBotUrl,
        allFields: Object.keys(response)
      })

      if (response.authToken && response.telegramBotUrl) {
        setAuthToken(response.authToken)
        setTelegramUrl(response.telegramBotUrl)
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ Telegram Bot URL:', response.telegramBotUrl)

        notifications.show({
          title: 'Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
          message: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ Telegram –±–æ—Ç –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          color: 'blue',
          icon: <IconBrandTelegram size={20} />
        })
      } else {
        console.error('‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', {
          response,
          missingAuthToken: !response.authToken,
          missingTelegramBotUrl: !response.telegramBotUrl
        })
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—è: ${Object.keys(response).join(', ')}`)
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error)
      console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error)
      console.error('‚ùå –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏:', error.constructor.name)

      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (error.code === 'ERR_BAD_REQUEST' && (error.message?.includes('429') || error.message?.includes('Too Many Requests') || error.message?.includes('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫'))) {
        errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
        setIsRateLimited(true)
        setRetryCountdown(RATE_LIMIT_RETRY_DELAY)

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        const countdownInterval = setInterval(() => {
          setRetryCountdown(prev => {
            if (prev <= 1) {
              clearInterval(countdownInterval)
              setIsRateLimited(false)
              return 0
            }
            return prev - 1
          })
        }, 1000)

      } else if (error.code === 'ERR_NETWORK') {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
      } else if (error.code === 'ECONNABORTED') {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.'
      } else if (error instanceof Error) {
        errorMessage = error.message
      } else if (typeof error === 'string') {
        errorMessage = error
      } else if (error && typeof error === 'object') {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ—à–∏–±–æ–∫ —Å details
        if (error.details && error.details.message) {
          errorMessage = error.details.message

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ rate limiting –æ—à–∏–±–∫–æ–π
          if (error.details.message.includes('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫')) {
            setIsRateLimited(true)
            setRetryCountdown(RATE_LIMIT_RETRY_DELAY)

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            const countdownInterval = setInterval(() => {
              setRetryCountdown(prev => {
                if (prev <= 1) {
                  clearInterval(countdownInterval)
                  setIsRateLimited(false)
                  return 0
                }
                return prev - 1
              })
            }, 1000)
          }
        } else if (error.message) {
          errorMessage = error.message
        } else {
          errorMessage = `–û—à–∏–±–∫–∞ API: ${JSON.stringify(error)}`
        }
      } else {
        errorMessage = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${JSON.stringify(error)}`
      }

      console.log('üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMessage)

      setError(errorMessage)

      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: errorMessage,
        color: 'red'
      })
    } finally {
      setIsLoading(false)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const pollAuthStatus = async () => {
    if (!authToken) return false

    try {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${pollAttempts + 1}/${MAX_POLL_ATTEMPTS})`)
      const response = await checkTelegramStatus(authToken)

      if (response) {
        console.log('‚úÖ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')

        notifications.show({
          title: '–£—Å–ø–µ—à–Ω–æ!',
          message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Telegram',
          color: 'green',
          icon: <IconBrandTelegram size={20} />
        })

        setIsPolling(false)
        onSuccess?.()
        return true
      }

      return false
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error)
      return false
    }
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
  const startPolling = () => {
    if (isPolling) return // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫

    setIsPolling(true)
    setPollAttempts(0)

    const pollInterval = setInterval(async () => {
      const success = await pollAuthStatus()

      if (success) {
        clearInterval(pollInterval)
        return
      }

      setPollAttempts(prev => {
        const newAttempts = prev + 1

        if (newAttempts >= MAX_POLL_ATTEMPTS) {
          clearInterval(pollInterval)
          setIsPolling(false)

          notifications.show({
            title: '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
            message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            color: 'orange'
          })
        }

        return newAttempts
      })
    }, POLL_INTERVAL)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    return () => clearInterval(pollInterval)
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ Telegram —Å—Å—ã–ª–∫–∏
  const openTelegramLink = () => {
    if (telegramUrl) {
      window.open(telegramUrl, '_blank')
      if (!isPolling) {
        startPolling()
      }
    }
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const resetState = () => {
    setTelegramUrl(null)
    setAuthToken(null)
    setIsPolling(false)
    setPollAttempts(0)
    setError(null)
    setInitAttempted(false)
    setIsRateLimited(false)
    setRetryCountdown(0)
  }

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
  const retryInit = () => {
    if (isRateLimited) {
      notifications.show({
        title: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ',
        message: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ${retryCountdown} —Å–µ–∫—É–Ω–¥`,
        color: 'orange'
      })
      return
    }

    resetState()
    initTelegramAuthHandler()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    console.log('üîÑ useEffect TelegramAuthForm:', {
      initAttempted,
      isLoading,
      telegramUrl,
      authToken,
      isRateLimited,
      retryCountdown
    })

    // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å rate limiting
    if (isRateLimited) {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ rate limiting')
      return
    }

    if (!initAttempted) {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      setInitAttempted(true)
      initTelegramAuthHandler()
    } else {
      console.log('‚è≠Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ TelegramAuthForm –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
      setIsPolling(false)
    }
  }, [initAttempted, isRateLimited])

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª–ª–∏–Ω–≥–∞
  const pollProgress = (pollAttempts / MAX_POLL_ATTEMPTS) * 100

  return (
    <Paper p="xl" radius="md" withBorder>
      <Stack gap="lg">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Group gap="sm">
          <ThemeIcon size="lg" variant="light" color="blue">
            <IconBrandTelegram size={24} />
          </ThemeIcon>
          <div>
            <Title order={3}>–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram</Title>
            <Text size="sm" c="dimmed">
              –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞
            </Text>
          </div>
        </Group>

        <Divider />

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <Alert
            icon={<IconInfoCircle size={16} />}
            title={isRateLimited ? "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫" : "–û—à–∏–±–∫–∞"}
            color={isRateLimited ? "orange" : "red"}
            variant="light"
            withCloseButton
            onClose={() => setError(null)}
          >
            {error}
            {isRateLimited && retryCountdown > 0 && (
              <Text size="sm" mt="xs" c="dimmed">
                –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {retryCountdown} —Å–µ–∫—É–Ω–¥
              </Text>
            )}
            <Group mt="sm">
              <Button
                size="xs"
                variant="light"
                color={isRateLimited ? "orange" : "red"}
                leftSection={<IconRefresh size={14} />}
                onClick={retryInit}
                disabled={isRateLimited && retryCountdown > 0}
              >
                {isRateLimited && retryCountdown > 0
                  ? `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${retryCountdown}—Å`
                  : "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
                }
              </Button>
            </Group>
          </Alert>
        )}

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
        {isLoading && (
          <Center p="xl">
            <Stack gap="sm" align="center">
              <Loader size="lg" color="blue" />
              <Text size="sm" c="dimmed">
                –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...
              </Text>
            </Stack>
          </Center>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram */}
        {telegramUrl && !isLoading && (
          <Stack gap="md">
            <Button
              size="lg"
              leftSection={<IconBrandTelegram size={20} />}
              rightSection={<IconExternalLink size={16} />}
              onClick={openTelegramLink}
              variant="filled"
              color="blue"
              fullWidth
            >
              –û—Ç–∫—Ä—ã—Ç—å Telegram –±–æ—Ç
            </Button>

            {/* –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ */}
            <Group gap="xs" justify="center">
              <Text size="xs" c="dimmed">
                –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:
              </Text>
              <CopyButton value={telegramUrl}>
                {({ copied, copy }) => (
                  <Tooltip label={copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É'}>
                    <ActionIcon
                      color={copied ? 'teal' : 'gray'}
                      variant="subtle"
                      onClick={copy}
                      size="sm"
                    >
                      {copied ? <IconCheck size={14} /> : <IconCopy size={14} />}
                    </ActionIcon>
                  </Tooltip>
                )}
              </CopyButton>
            </Group>
          </Stack>
        )}

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–ª–ª–∏–Ω–≥–∞ */}
        {isPolling && (
          <Stack gap="sm">
            <Group justify="space-between" align="center">
              <Text size="sm" fw={500}>
                –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...
              </Text>
              <Badge variant="light" color="blue" size="sm">
                {pollAttempts}/{MAX_POLL_ATTEMPTS}
              </Badge>
            </Group>

            <Progress
              value={pollProgress}
              color="blue"
              size="sm"
              animated
            />

            <Text size="xs" c="dimmed" ta="center">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ Telegram –±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.
            </Text>
          </Stack>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        {telegramUrl && !isLoading && (
          <Alert
            icon={<IconInfoCircle size={16} />}
            title="–ö–∞–∫ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"
            color="blue"
            variant="light"
          >
            <Stack gap="xs">
              <Text size="sm">1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Telegram –±–æ—Ç"</Text>
              <Text size="sm">2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ "Start" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start</Text>
              <Text size="sm">3. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±–æ—Ç–æ–º</Text>
              <Text size="sm">4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç</Text>
            </Stack>
          </Alert>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Group justify="space-between">
          {onBack && (
            <Button variant="subtle" onClick={onBack}>
              –ù–∞–∑–∞–¥
            </Button>
          )}

          {telegramUrl && !isPolling && (
            <Button
              variant="light"
              leftSection={<IconRefresh size={16} />}
              onClick={retryInit}
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          )}
        </Group>
      </Stack>
    </Paper>
  )
} 