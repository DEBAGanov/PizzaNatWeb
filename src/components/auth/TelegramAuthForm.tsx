/**
 * @file: TelegramAuthForm.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
 * @dependencies: AuthContext, authApi, Mantine UI
 * @created: 2024-12-19
 */

import React, { useState, useEffect } from 'react'
import {
  Paper,
  Title,
  Text,
  Button,
  Stack,
  Alert,
  Loader,
  Center,
  Group,
  ThemeIcon,
  Box,
  Divider
} from '@mantine/core'
import { notifications } from '@mantine/notifications'
import { IconBrandTelegram, IconInfoCircle, IconArrowLeft, IconExternalLink } from '@tabler/icons-react'
import { useAuth } from '../../contexts/AuthContext'
import { authApi } from '../../services/authApi'

interface TelegramAuthFormProps {
  onBack?: () => void
  onSuccess?: () => void
}

export const TelegramAuthForm: React.FC<TelegramAuthFormProps> = ({ onBack, onSuccess }) => {
  const { login } = useAuth()
  const [isLoading, setIsLoading] = useState(false)
  const [telegramUrl, setTelegramUrl] = useState<string | null>(null)
  const [isPolling, setIsPolling] = useState(false)
  const [pollAttempts, setPollAttempts] = useState(0)
  const [error, setError] = useState<string | null>(null)

  const MAX_POLL_ATTEMPTS = 60 // 5 –º–∏–Ω—É—Ç (60 * 5 —Å–µ–∫—É–Ω–¥)
  const POLL_INTERVAL = 5000 // 5 —Å–µ–∫—É–Ω–¥

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const initTelegramAuth = async () => {
    try {
      setIsLoading(true)
      setError(null)
      
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
      const response = await authApi.initTelegramAuth()
      
      if (response.success && response.data?.url) {
        setTelegramUrl(response.data.url)
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ Telegram URL:', response.data.url)
        
        notifications.show({
          title: 'Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
          message: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ Telegram',
          color: 'blue',
          icon: <IconBrandTelegram size={20} />
        })
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error)
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      setError(errorMessage)
      
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: errorMessage,
        color: 'red'
      })
    } finally {
      setIsLoading(false)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const pollAuthStatus = async () => {
    try {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${pollAttempts + 1}/${MAX_POLL_ATTEMPTS})`)
      const response = await authApi.checkTelegramAuth()
      
      if (response.success && response.data) {
        console.log('‚úÖ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ AuthContext
        await login(response.data.access_token, response.data.refresh_token)
        
        notifications.show({
          title: '–£—Å–ø–µ—à–Ω–æ!',
          message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Telegram',
          color: 'green',
          icon: <IconBrandTelegram size={20} />
        })
        
        setIsPolling(false)
        onSuccess?.()
        return true
      }
      
      return false
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error)
      return false
    }
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
  const startPolling = () => {
    setIsPolling(true)
    setPollAttempts(0)
    
    const pollInterval = setInterval(async () => {
      const success = await pollAuthStatus()
      
      if (success) {
        clearInterval(pollInterval)
        return
      }
      
      setPollAttempts(prev => {
        const newAttempts = prev + 1
        
        if (newAttempts >= MAX_POLL_ATTEMPTS) {
          clearInterval(pollInterval)
          setIsPolling(false)
          
          notifications.show({
            title: '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
            message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            color: 'orange'
          })
        }
        
        return newAttempts
      })
    }, POLL_INTERVAL)
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ Telegram —Å—Å—ã–ª–∫–∏
  const openTelegramLink = () => {
    if (telegramUrl) {
      window.open(telegramUrl, '_blank')
      startPolling()
    }
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const resetState = () => {
    setTelegramUrl(null)
    setIsPolling(false)
    setPollAttempts(0)
    setError(null)
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    initTelegramAuth()
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      setIsPolling(false)
    }
  }, [])

  return (
    <Paper p="xl" radius="md" withBorder>
      <Stack gap="lg">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Group gap="sm">
          <ThemeIcon size="lg" variant="light" color="blue">
            <IconBrandTelegram size={24} />
          </ThemeIcon>
          <div>
            <Title order={3}>–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram</Title>
            <Text size="sm" c="dimmed">
              –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞
            </Text>
          </div>
        </Group>

        <Divider />

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <Alert
            icon={<IconInfoCircle size={16} />}
            title="–û—à–∏–±–∫–∞"
            color="red"
            variant="light"
          >
            {error}
          </Alert>
        )}

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
        {isLoading && (
          <Center p="xl">
            <Stack gap="sm" align="center">
              <Loader size="lg" color="blue" />
              <Text size="sm" c="dimmed">
                –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...
              </Text>
            </Stack>
          </Center>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram */}
        {telegramUrl && !isPolling && (
          <Stack gap="md">
            <Alert
              icon={<IconInfoCircle size={16} />}
              title="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
              color="blue"
              variant="light"
            >
              <Text size="sm">
                1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Telegram"
                <br />
                2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ –±–æ—Ç–µ
                <br />
                3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
              </Text>
            </Alert>

            <Button
              size="lg"
              leftSection={<IconBrandTelegram size={20} />}
              rightSection={<IconExternalLink size={16} />}
              onClick={openTelegramLink}
              fullWidth
              variant="filled"
              color="blue"
            >
              –û—Ç–∫—Ä—ã—Ç—å Telegram
            </Button>
          </Stack>
        )}

        {/* –ü—Ä–æ—Ü–µ—Å—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
        {isPolling && (
          <Stack gap="md">
            <Alert
              icon={<IconInfoCircle size={16} />}
              title="–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
              color="blue"
              variant="light"
            >
              <Text size="sm">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ Telegram –±–æ—Ç–µ.
                <br />
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {pollAttempts}/{MAX_POLL_ATTEMPTS}
              </Text>
            </Alert>

            <Center>
              <Stack gap="sm" align="center">
                <Loader size="md" color="blue" />
                <Text size="sm" c="dimmed">
                  –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...
                </Text>
              </Stack>
            </Center>

            <Group justify="center">
              <Button
                variant="light"
                color="gray"
                onClick={() => {
                  setIsPolling(false)
                  setPollAttempts(0)
                }}
              >
                –û—Ç–º–µ–Ω–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ
              </Button>
            </Group>
          </Stack>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Stack gap="sm">
          {!isLoading && !isPolling && telegramUrl && (
            <Button
              variant="light"
              color="gray"
              onClick={() => {
                resetState()
                initTelegramAuth()
              }}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
            </Button>
          )}

          {onBack && (
            <Button
              variant="subtle"
              color="gray"
              leftSection={<IconArrowLeft size={16} />}
              onClick={onBack}
              disabled={isLoading || isPolling}
            >
              –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞
            </Button>
          )}
        </Stack>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Box>
          <Text size="xs" c="dimmed" ta="center">
            –ò—Å–ø–æ–ª—å–∑—É—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–µ—Ä–µ–¥–∞—á–µ–π
            –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ Telegram
          </Text>
        </Box>
      </Stack>
    </Paper>
  )
} 