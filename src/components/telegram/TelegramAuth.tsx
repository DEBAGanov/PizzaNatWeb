/**
 * @file: TelegramAuth.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –≤ Web App
 * @dependencies: useTelegram, AuthContext
 * @created: 2025-01-24
 */

import React, { useEffect, useState } from 'react'
import { Button, Stack, Text, Alert, Paper, Group } from '@mantine/core'
import { IconBrandTelegram, IconInfoCircle, IconCheck } from '@tabler/icons-react'
import { useTelegram } from '../../contexts/TelegramContext'
import { useAuth } from '../../contexts/AuthContext'

interface TelegramAuthProps {
  onSuccess?: () => void
  onError?: (error: string) => void
}

export const TelegramAuth: React.FC<TelegramAuthProps> = ({
  onSuccess,
  onError
}) => {
  const { isInTelegram, user: tgUser } = useTelegram()
  const { loginWithTelegram, user, loading } = useAuth()
  const [authLoading, setAuthLoading] = useState(false)
  const [authError, setAuthError] = useState<string | null>(null)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—Å–ª–∏ –º—ã –≤ Telegram –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (isInTelegram && tgUser && !user && !authLoading) {
      handleTelegramAuth()
    }
  }, [isInTelegram, tgUser, user])

  const handleTelegramAuth = async () => {
    if (!isInTelegram || !tgUser) {
      setAuthError('Telegram Web App –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      onError?.('Telegram Web App –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      return
    }

    setAuthLoading(true)
    setAuthError(null)

    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramData = {
        id: tgUser.id,
        first_name: tgUser.first_name,
        last_name: tgUser.last_name,
        username: tgUser.username,
        language_code: tgUser.language_code,
        is_premium: tgUser.is_premium
      }

      await loginWithTelegram(telegramData)
      
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞:', telegramData)
      onSuccess?.()
    } catch (error: any) {
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram'
      setAuthError(errorMessage)
      onError?.(errorMessage)
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
    } finally {
      setAuthLoading(false)
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –≤ Telegram, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!isInTelegram) {
    return null
  }

  // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  if (user) {
    return (
      <Alert icon={<IconCheck size={16} />} color="green" variant="light">
        <Stack gap="xs">
          <Text fw={500}>–í—ã –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Telegram</Text>
          <Text size="sm" c="dimmed">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name || tgUser?.first_name}!
          </Text>
        </Stack>
      </Alert>
    )
  }

  return (
    <Paper p="lg" radius="md" withBorder>
      <Stack gap="md">
        <Group>
          <IconBrandTelegram size={24} color="#0088cc" />
          <Text fw={600} size="lg">–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram</Text>
        </Group>

        {tgUser ? (
          <Stack gap="sm">
            <Text size="sm" c="dimmed">
              –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Telegram:
            </Text>
            <Text size="sm">
              üë§ {tgUser.first_name} {tgUser.last_name}
              {tgUser.username && ` (@${tgUser.username})`}
            </Text>
            
            {authError && (
              <Alert icon={<IconInfoCircle size={16} />} color="red" variant="light">
                {authError}
              </Alert>
            )}
            
            <Button
              fullWidth
              color="blue"
              loading={authLoading || loading}
              leftSection={<IconBrandTelegram size={18} />}
              onClick={handleTelegramAuth}
            >
              {authLoading ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...' : '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'}
            </Button>
          </Stack>
        ) : (
          <Alert icon={<IconInfoCircle size={16} />} color="orange" variant="light">
            <Stack gap="xs">
              <Text fw={500}>–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</Text>
              <Text size="sm">
                –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram Web App
              </Text>
            </Stack>
          </Alert>
        )}
      </Stack>
    </Paper>
  )
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const useTelegramAuth = () => {
  const { isInTelegram, user: tgUser } = useTelegram()
  const { user } = useAuth()

  return {
    canUseTelegramAuth: isInTelegram && tgUser && !user,
    isAuthenticated: Boolean(user),
    telegramUser: tgUser,
    isInTelegram
  }
}