/**
 * @file: TelegramApp.tsx
 * @description: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Telegram Web App
 * @dependencies: React Router, Mantine, Telegram –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 * @created: 2025-01-24
 */

import React, { useEffect } from 'react'
import { Routes, Route, useLocation } from 'react-router-dom'
import { Container, Stack, MantineProvider } from '@mantine/core'
import { useTelegram } from '../../contexts/TelegramContext'
import { useTelegramTheme } from '../../utils/telegramTheme'
import { TelegramHeader, TelegramSafeArea } from './TelegramNavigation'

// –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
import { HomePage } from '../../pages/HomePage'
import { MenuPage } from '../../pages/MenuPage'
import { ProductPage } from '../../pages/ProductPage'
import { CartPage } from '../../pages/CartPage'
import { CheckoutPage } from '../../pages/CheckoutPage'
import { OrdersPage } from '../../pages/OrdersPage'
import { AuthPage } from '../../pages/AuthPage'
import PrivacyPolicyPage from '../../pages/PrivacyPolicyPage'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Telegram
const TelegramPageWrapper: React.FC<{
  children: React.ReactNode
  title?: string
  showBackButton?: boolean
}> = ({ children, title, showBackButton = false }) => {
  return (
    <TelegramSafeArea bottom>
      <Stack gap={0} style={{ minHeight: '100vh' }}>
        <TelegramHeader title={title} showBackButton={showBackButton} />
        <Container size="lg" style={{ flex: 1 }} p="md">
          {children}
        </Container>
      </Stack>
    </TelegramSafeArea>
  )
}

export const TelegramApp: React.FC = () => {
  const location = useLocation()
  const { themeParams, colorScheme, hapticFeedback, user } = useTelegram()
  
  // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è Telegram
  const telegramTheme = useTelegramTheme(themeParams, colorScheme, true)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω—É–∂–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  const getPageConfig = (pathname: string) => {
    switch (pathname) {
      case '/':
        return { title: '–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞', showBack: false }
      case '/menu':
        return { title: '–ú–µ–Ω—é', showBack: true }
      case '/cart':
        return { title: '–ö–æ—Ä–∑–∏–Ω–∞', showBack: true }
      case '/checkout':
        return { title: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', showBack: true }
      case '/orders':
        return { title: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', showBack: true }
      case '/auth':
        return { title: '–í—Ö–æ–¥', showBack: true }
      case '/privacy':
        return { title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', showBack: true }
      default:
        if (pathname.startsWith('/product/')) {
          return { title: '–¢–æ–≤–∞—Ä', showBack: true }
        }
        if (pathname.startsWith('/orders/')) {
          return { title: '–ó–∞–∫–∞–∑', showBack: true }
        }
        return { title: '–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞', showBack: true }
    }
  }

  const pageConfig = getPageConfig(location.pathname)

  // Haptic feedback –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    hapticFeedback.impact('light')
  }, [location.pathname])

  return (
    <MantineProvider theme={telegramTheme}>
      <div style={{ backgroundColor: telegramTheme.other?.telegramTheme?.bgColor }}>
        <Routes>
          <Route
            path="/"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <HomePage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/menu"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <MenuPage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/product/:id"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <ProductPage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/cart"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <CartPage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/checkout"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <CheckoutPage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/orders"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <OrdersPage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/orders/:id"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <div>Order Details - TODO</div>
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/auth"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <AuthPage />
              </TelegramPageWrapper>
            }
          />
          
          <Route
            path="/privacy"
            element={
              <TelegramPageWrapper
                title={pageConfig.title}
                showBackButton={pageConfig.showBack}
              >
                <PrivacyPolicyPage />
              </TelegramPageWrapper>
            }
          />
        </Routes>
      </div>
    </MantineProvider>
  )
}

// –•—É–∫ –¥–ª—è Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
export const useTelegramPage = (config: string | { title?: string; backButton?: boolean; backButtonText?: string }) => {
  const { hapticFeedback, showMainButton, hideMainButton, isInTelegram } = useTelegram()
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç—Ä–æ–∫–∞) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const pageName = typeof config === 'string' ? config : (config.title || 'Unknown')
  
  useEffect(() => {
    // –õ–æ–≥–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Telegram
    if (isInTelegram) {
      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è Telegram
      console.log(`üì± Telegram Web App: –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageName}`)
      
      // –°–∫—Ä—ã–≤–∞–µ–º main button –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      hideMainButton()
      
      return () => {
        hideMainButton()
      }
    }
  }, [pageName, isInTelegram]) // eslint-disable-line react-hooks/exhaustive-deps
  
  return {
    hapticFeedback,
    showMainButton,
    hideMainButton
  }
}