/**
 * @file: ProductsContext.tsx
 * @description: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–æ—Ä–∑–∏–Ω—ã
 * @dependencies: React, productsApi, —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @created: 2024-12-19
 */

import { createContext, useContext, useReducer, useEffect, useCallback, type ReactNode } from 'react'
import { notifications } from '@mantine/notifications'
import { productsApi } from '../services/productsApi'
import { useYandexMetrika } from '../components/analytics/YandexMetrika'
import { cartItemToEcommerce, cartItemsToEcommerce } from '../utils/ecommerceHelpers'
import type {
  Category,
  Product,
  Cart,
  ProductsListRequest,
  ProductsListResponse,
  AddToCartRequest,
  UpdateCartItemRequest,
  ProductFilters,
  CartItem
} from '../types/products'

// –¢–∏–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface ProductsState {
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  categories: Category[]
  categoriesLoading: boolean
  categoriesError: string | null

  // –ü—Ä–æ–¥—É–∫—Ç—ã
  products: Product[]
  productsLoading: boolean
  productsError: string | null
  productsTotal: number
  productsPage: number
  productsLimit: number

  // –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
  currentProduct: Product | null
  currentProductLoading: boolean
  currentProductError: string | null

  // –ö–æ—Ä–∑–∏–Ω–∞
  cart: Cart | null
  cartLoading: boolean
  cartError: string | null
  removedCartItemIds: Set<number> // –≠–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ 404 –æ—à–∏–±–∫—É

  // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
  searchQuery: string
  filters: ProductFilters
  isSearching: boolean

  // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  favorites: number[]
  favoritesLoading: boolean
}

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
type ProductsAction =
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  | { type: 'SET_CATEGORIES_LOADING'; payload: boolean }
  | { type: 'SET_CATEGORIES'; payload: Category[] }
  | { type: 'SET_CATEGORIES_ERROR'; payload: string | null }
  
  // –ü—Ä–æ–¥—É–∫—Ç—ã
  | { type: 'SET_PRODUCTS_LOADING'; payload: boolean }
  | { type: 'SET_PRODUCTS'; payload: ProductsListResponse }
  | { type: 'APPEND_PRODUCTS'; payload: Product[] }
  | { type: 'SET_PRODUCTS_ERROR'; payload: string | null }
  
  // –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
  | { type: 'SET_CURRENT_PRODUCT_LOADING'; payload: boolean }
  | { type: 'SET_CURRENT_PRODUCT'; payload: Product | null }
  | { type: 'SET_CURRENT_PRODUCT_ERROR'; payload: string | null }
  
  // –ö–æ—Ä–∑–∏–Ω–∞
  | { type: 'SET_CART_LOADING'; payload: boolean }
  | { type: 'SET_CART'; payload: Cart | null }
  | { type: 'SET_CART_ERROR'; payload: string | null }
  | { type: 'ADD_REMOVED_CART_ITEM'; payload: number }
  | { type: 'CLEAR_REMOVED_CART_ITEMS' }
  
  // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
  | { type: 'SET_SEARCH_QUERY'; payload: string }
  | { type: 'SET_FILTERS'; payload: Partial<ProductFilters> }
  | { type: 'SET_IS_SEARCHING'; payload: boolean }
  
  // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  | { type: 'SET_FAVORITES_LOADING'; payload: boolean }
  | { type: 'SET_FAVORITES'; payload: number[] }
  | { type: 'TOGGLE_FAVORITE'; payload: number }

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: ProductsState = {
  categories: [],
  categoriesLoading: false,
  categoriesError: null,

  products: [],
  productsLoading: false,
  productsError: null,
  productsTotal: 0,
  productsPage: 1,
  productsLimit: 20,

  currentProduct: null,
  currentProductLoading: false,
  currentProductError: null,

  cart: null,
  cartLoading: false,
  cartError: null,
  removedCartItemIds: new Set(),

  searchQuery: '',
  filters: {
    categories: [],
    is_available: true
  },
  isSearching: false,

  favorites: [],
  favoritesLoading: false
}

// –†–µ–¥—å—é—Å–µ—Ä
function productsReducer(state: ProductsState, action: ProductsAction): ProductsState {
  switch (action.type) {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    case 'SET_CATEGORIES_LOADING':
      return { ...state, categoriesLoading: action.payload }
    case 'SET_CATEGORIES':
      return { ...state, categories: action.payload, categoriesLoading: false, categoriesError: null }
    case 'SET_CATEGORIES_ERROR':
      return { ...state, categoriesError: action.payload, categoriesLoading: false }

    // –ü—Ä–æ–¥—É–∫—Ç—ã
    case 'SET_PRODUCTS_LOADING':
      return { ...state, productsLoading: action.payload }
    case 'SET_PRODUCTS':
      return {
        ...state,
        products: action.payload.products,
        productsTotal: action.payload.total,
        productsPage: action.payload.page,
        productsLimit: action.payload.limit,
        productsLoading: false,
        productsError: null
      }
    case 'APPEND_PRODUCTS':
      return {
        ...state,
        products: [...state.products, ...action.payload],
        productsLoading: false
      }
    case 'SET_PRODUCTS_ERROR':
      return { ...state, productsError: action.payload, productsLoading: false }

    // –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
    case 'SET_CURRENT_PRODUCT_LOADING':
      return { ...state, currentProductLoading: action.payload }
    case 'SET_CURRENT_PRODUCT':
      return { ...state, currentProduct: action.payload, currentProductLoading: false, currentProductError: null }
    case 'SET_CURRENT_PRODUCT_ERROR':
      return { ...state, currentProductError: action.payload, currentProductLoading: false }

    // –ö–æ—Ä–∑–∏–Ω–∞
    case 'SET_CART_LOADING':
      return { ...state, cartLoading: action.payload }
    case 'SET_CART':
      return { ...state, cart: action.payload, cartLoading: false, cartError: null }
    case 'SET_CART_ERROR':
      return { ...state, cartError: action.payload, cartLoading: false }
    case 'ADD_REMOVED_CART_ITEM':
      const newRemovedSet = new Set([...state.removedCartItemIds, action.payload])
      console.log(`‚ûï ADD_REMOVED_CART_ITEM: –¥–æ–±–∞–≤–ª—è–µ–º ID ${action.payload}, –Ω–æ–≤—ã–π Set:`, Array.from(newRemovedSet))
      return { ...state, removedCartItemIds: newRemovedSet }
    case 'CLEAR_REMOVED_CART_ITEMS':
      console.log('üßπ CLEAR_REMOVED_CART_ITEMS: –æ—á–∏—â–∞–µ–º Set —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
      return { ...state, removedCartItemIds: new Set() }

    // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    case 'SET_SEARCH_QUERY':
      return { ...state, searchQuery: action.payload }
    case 'SET_FILTERS':
      return { ...state, filters: { ...state.filters, ...action.payload } }
    case 'SET_IS_SEARCHING':
      return { ...state, isSearching: action.payload }

    // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    case 'SET_FAVORITES_LOADING':
      return { ...state, favoritesLoading: action.payload }
    case 'SET_FAVORITES':
      return { ...state, favorites: action.payload, favoritesLoading: false }
    case 'TOGGLE_FAVORITE':
      const productId = action.payload
      const isFavorite = state.favorites.includes(productId)
      return {
        ...state,
        favorites: isFavorite
          ? state.favorites.filter(id => id !== productId)
          : [...state.favorites, productId]
      }

    default:
      return state
  }
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç
interface ProductsContextType {
  state: ProductsState
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  loadCategories: () => Promise<void>
  
  // –ü—Ä–æ–¥—É–∫—Ç—ã
  loadProducts: (params?: ProductsListRequest) => Promise<void>
  loadMoreProducts: () => Promise<void>
  loadProduct: (id: number) => Promise<void>
  searchProducts: (query: string) => Promise<void>
  
  // –ö–æ—Ä–∑–∏–Ω–∞
  loadCart: () => Promise<void>
  addToCart: (item: AddToCartRequest) => Promise<void>
  updateCartItem: (itemId: number, updates: UpdateCartItemRequest) => Promise<void>
  removeFromCart: (itemId: number) => Promise<void>
  clearCart: () => Promise<void>
  
  // –§–∏–ª—å—Ç—Ä—ã
  setFilters: (filters: Partial<ProductFilters>) => void
  clearFilters: () => void
  
  // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  loadFavorites: () => Promise<void>
  toggleFavorite: (productId: number) => Promise<void>
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getCartItemsCount: () => number
  getCartTotal: () => number
  getFilteredCart: () => Cart | null
  isFavorite: (productId: number) => boolean
}

const ProductsContext = createContext<ProductsContextType | null>(null)

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä
interface ProductsProviderProps {
  children: ReactNode
}

export function ProductsProvider({ children }: ProductsProviderProps) {
  const [state, dispatch] = useReducer(productsReducer, initialState)

  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  const YANDEX_METRIKA_ID = import.meta.env.VITE_YANDEX_METRIKA_ID || '103585127'
  const { trackRemoveFromCart } = useYandexMetrika(YANDEX_METRIKA_ID)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const loadCategories = useCallback(async () => {
    try {
      dispatch({ type: 'SET_CATEGORIES_LOADING', payload: true })
      const response = await productsApi.getCategories()
      dispatch({ type: 'SET_CATEGORIES', payload: response.categories })
    } catch (error: any) {
      dispatch({ type: 'SET_CATEGORIES_ERROR', payload: error.message })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        color: 'red'
      })
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const loadProducts = useCallback(async (params: ProductsListRequest = {}) => {
    try {
      dispatch({ type: 'SET_PRODUCTS_LOADING', payload: true })
      const response = await productsApi.getProducts(params)
      dispatch({ type: 'SET_PRODUCTS', payload: response })
    } catch (error: any) {
      dispatch({ type: 'SET_PRODUCTS_ERROR', payload: error.message })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã',
        color: 'red'
      })
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
  const loadMoreProducts = async () => {
    if (state.productsLoading) return

    try {
      dispatch({ type: 'SET_PRODUCTS_LOADING', payload: true })
      const nextPage = state.productsPage + 1
      const response = await productsApi.getProducts({
        page: nextPage,
        size: state.productsLimit,
        search: state.searchQuery || undefined
      })
      dispatch({ type: 'APPEND_PRODUCTS', payload: response.products })
    } catch (error: any) {
      dispatch({ type: 'SET_PRODUCTS_ERROR', payload: error.message })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
        color: 'red'
      })
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
  const loadProduct = async (id: number) => {
    try {
      dispatch({ type: 'SET_CURRENT_PRODUCT_LOADING', payload: true })
      const product = await productsApi.getProductById(id)
      dispatch({ type: 'SET_CURRENT_PRODUCT', payload: product })
    } catch (error: any) {
      dispatch({ type: 'SET_CURRENT_PRODUCT_ERROR', payload: error.message })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
        color: 'red'
      })
    }
  }

  // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const searchProducts = async (query: string) => {
    try {
      dispatch({ type: 'SET_SEARCH_QUERY', payload: query })
      dispatch({ type: 'SET_IS_SEARCHING', payload: true })
      
      const response = await productsApi.searchProducts(query)
      dispatch({ type: 'SET_PRODUCTS', payload: {
        products: response.products,
        total: response.total,
        page: 1,
        limit: state.productsLimit,
        total_pages: Math.ceil(response.total / state.productsLimit)
      }})
    } catch (error: any) {
      dispatch({ type: 'SET_PRODUCTS_ERROR', payload: error.message })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫',
        color: 'red'
      })
    } finally {
      dispatch({ type: 'SET_IS_SEARCHING', payload: false })
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  const loadCart = useCallback(async () => {
    console.log('üõí –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...')
    try {
      dispatch({ type: 'SET_CART_LOADING', payload: true })
      const cart = await productsApi.getCart()
      console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ API:', cart)
      dispatch({ type: 'SET_CART', payload: cart })
      dispatch({ type: 'SET_CART_ERROR', payload: null }) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      // –ù–ï –æ—á–∏—â–∞–µ–º removedCartItemIds –∑–¥–µ—Å—å - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!
      dispatch({ type: 'SET_CART_LOADING', payload: false })
    } catch (error: any) {
      // –î–ª—è development –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å dev —Ç–æ–∫–µ–Ω–∞–º–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
      if (window.location.hostname === 'localhost' && window.location.port === '8080') {
        console.warn('‚ö†Ô∏è Development mode: API –æ—à–∏–±–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É:', error.message)
        const emptyCart = {
          id: null,
          sessionId: 'dev-session-' + Date.now(),
          totalAmount: 0,
          items: []
        }
        console.log('üîß –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è dev —Ä–µ–∂–∏–º–∞:', emptyCart)
        dispatch({ type: 'SET_CART', payload: emptyCart })
        dispatch({ type: 'SET_CART_ERROR', payload: null }) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ dev —Ä–µ–∂–∏–º–µ
        // –ù–ï –æ—á–∏—â–∞–µ–º removedCartItemIds –≤ dev —Ä–µ–∂–∏–º–µ - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!
        dispatch({ type: 'SET_CART_LOADING', payload: false })
        return
      }
      
      dispatch({ type: 'SET_CART_ERROR', payload: error.message })
      dispatch({ type: 'SET_CART_LOADING', payload: false })
      // –î–ª—è –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (error.code !== 'UNAUTHORIZED') {
        notifications.show({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
          color: 'red'
        })
      }
    }
  }, [])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = useCallback(async (item: AddToCartRequest) => {
    console.log('üõí –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É:', item)
    try {
      dispatch({ type: 'SET_CART_LOADING', payload: true })
      const cart = await productsApi.addToCart(item)
      console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API:', cart)
      dispatch({ type: 'SET_CART', payload: cart })
      console.log('üßπ addToCart –£–°–ü–ï–•: –æ—á–∏—â–∞–µ–º removedCartItemIds')
      dispatch({ type: 'CLEAR_REMOVED_CART_ITEMS' }) // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
      dispatch({ type: 'SET_CART_LOADING', payload: false })
      notifications.show({
        title: '–£—Å–ø–µ—à–Ω–æ',
        message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
        color: 'green'
      })
    } catch (error: any) {
      // –î–ª—è development –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å dev —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      if (window.location.hostname === 'localhost' && window.location.port === '8080') {
        console.warn('‚ö†Ô∏è Development mode: API –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É, –∏–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:', error.message)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –ª–æ–∫–∞–ª—å–Ω–æ
        const currentCart = state.cart || {
          id: null,
          sessionId: 'dev-session-' + Date.now(),
          totalAmount: 0,
          items: []
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const existingItemIndex = currentCart.items.findIndex(cartItem => cartItem.productId === item.productId)
        
        let updatedCart
        if (existingItemIndex >= 0) {
          // –¢–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          const existingItem = currentCart.items[existingItemIndex]
          const newQuantity = existingItem.quantity + (item.quantity || 1)
          const newSubtotal = existingItem.price * newQuantity
          
          const updatedItems = [...currentCart.items]
          updatedItems[existingItemIndex] = {
            ...existingItem,
            quantity: newQuantity,
            subtotal: newSubtotal
          }
          
          updatedCart = {
            ...currentCart,
            items: updatedItems,
            totalAmount: currentCart.totalAmount + existingItem.price * (item.quantity || 1)
          }
        } else {
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
          const newItem = {
            id: Date.now(),
            productId: item.productId,
            productName: '–¢–æ–≤–∞—Ä #' + item.productId,
            productImageUrl: '',
            price: 499,
            discountedPrice: 499,
            quantity: item.quantity || 1,
            subtotal: 499 * (item.quantity || 1)
          }
          
          updatedCart = {
            ...currentCart,
            items: [...currentCart.items, newItem],
            totalAmount: currentCart.totalAmount + newItem.subtotal
          }
        }
        
        console.log('üîß Dev mode: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', updatedCart)
        
        dispatch({ type: 'SET_CART', payload: updatedCart })
        console.log('üßπ addToCart DEV –£–°–ü–ï–•: –æ—á–∏—â–∞–µ–º removedCartItemIds')
        dispatch({ type: 'CLEAR_REMOVED_CART_ITEMS' }) // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ dev —Ä–µ–∂–∏–º–µ
        dispatch({ type: 'SET_CART_LOADING', payload: false })
        notifications.show({
          title: '–£—Å–ø–µ—à–Ω–æ (Dev)',
          message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (–∏–º–∏—Ç–∞—Ü–∏—è)',
          color: 'green'
        })
        return
      }
      
      dispatch({ type: 'SET_CART_ERROR', payload: error.message })
      dispatch({ type: 'SET_CART_LOADING', payload: false })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É',
        color: 'red'
      })
    }
  }, [state.cart])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ productId
  const updateCartItem = async (productId: number, updates: UpdateCartItemRequest) => {
    console.log('üìä updateCartItem: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ productId', { productId, updates })
    try {
      dispatch({ type: 'SET_CART_LOADING', payload: true })
      const cart = await productsApi.updateCartItem(productId, updates)
      console.log('‚úÖ updateCartItem: —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API')
      dispatch({ type: 'SET_CART', payload: cart })
      console.log('üßπ updateCartItem –£–°–ü–ï–•: –æ—á–∏—â–∞–µ–º removedCartItemIds')
      dispatch({ type: 'CLEAR_REMOVED_CART_ITEMS' }) // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      dispatch({ type: 'SET_CART_LOADING', payload: false })
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã:', error)
      
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404 –∏–ª–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω"), –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      const isNotFound = error.message?.includes('404') || 
                        error.status === 404 || 
                        error.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ||
                        error.message?.includes('not found') ||
                        (error.code === 'ERR_BAD_REQUEST' && error.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω'))
      
      if (isNotFound) {
        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É')
        // –ü–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –∏–∑ UI
        dispatch({ type: 'ADD_REMOVED_CART_ITEM', payload: productId })
        await loadCart()
        notifications.show({
          title: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
          message: '–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.',
          color: 'orange'
        })
      } else {
        dispatch({ type: 'SET_CART_ERROR', payload: error.message })
        dispatch({ type: 'SET_CART_LOADING', payload: false }) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º loading –ø—Ä–∏ –æ—à–∏–±–∫–µ
        notifications.show({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ',
          color: 'red'
        })
      }
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ productId
  const removeFromCart = async (productId: number) => {
    console.log('üóëÔ∏è removeFromCart: –Ω–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ productId', { productId })
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–æ API –≤—ã–∑–æ–≤–∞
    const cartItem = state.cart?.items.find(item => item.productId === productId)
    if (cartItem) {
      const ecommerceProduct = cartItemToEcommerce(cartItem, { list: "–ö–æ—Ä–∑–∏–Ω–∞" })
      trackRemoveFromCart(ecommerceProduct)
    }
    
    try {
      dispatch({ type: 'SET_CART_LOADING', payload: true })
      const cart = await productsApi.removeFromCart(productId)
      console.log('‚úÖ removeFromCart: —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API')
      dispatch({ type: 'SET_CART', payload: cart })
      console.log('üßπ removeFromCart –£–°–ü–ï–•: –æ—á–∏—â–∞–µ–º removedCartItemIds')
      dispatch({ type: 'CLEAR_REMOVED_CART_ITEMS' }) // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
      dispatch({ type: 'SET_CART_LOADING', payload: false })
      notifications.show({
        title: '–£—Å–ø–µ—à–Ω–æ',
        message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
        color: 'orange'
      })
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã:', error)
      
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404 –∏–ª–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω"), –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      const isNotFound = error.message?.includes('404') || 
                        error.status === 404 || 
                        error.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ||
                        error.message?.includes('not found') ||
                        (error.code === 'ERR_BAD_REQUEST' && error.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω'))
      
      if (isNotFound) {
        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É')
        // –ü–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –∏–∑ UI
        dispatch({ type: 'ADD_REMOVED_CART_ITEM', payload: productId })
        await loadCart()
        notifications.show({
          title: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
          message: '–¢–æ–≤–∞—Ä —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.',
          color: 'orange'
        })
      } else {
        dispatch({ type: 'SET_CART_ERROR', payload: error.message })
        dispatch({ type: 'SET_CART_LOADING', payload: false }) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º loading –ø—Ä–∏ –æ—à–∏–±–∫–µ
        notifications.show({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
          color: 'red'
        })
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  const clearCart = async () => {
    try {
      dispatch({ type: 'SET_CART_LOADING', payload: true })
      await productsApi.clearCart()
      dispatch({ type: 'SET_CART', payload: null })
      notifications.show({
        title: '–£—Å–ø–µ—à–Ω–æ',
        message: '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞',
        color: 'orange'
      })
    } catch (error: any) {
      dispatch({ type: 'SET_CART_ERROR', payload: error.message })
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
        color: 'red'
      })
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const setFilters = (filters: Partial<ProductFilters>) => {
    dispatch({ type: 'SET_FILTERS', payload: filters })
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const clearFilters = () => {
    dispatch({ type: 'SET_FILTERS', payload: { categories: [], is_available: true } })
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const loadFavorites = async () => {
    try {
      dispatch({ type: 'SET_FAVORITES_LOADING', payload: true })
      const response = await productsApi.getFavorites()
      const favoriteIds = response.favorites.map(fav => fav.product_id)
      dispatch({ type: 'SET_FAVORITES', payload: favoriteIds })
    } catch (error: any) {
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (error.code !== 'UNAUTHORIZED') {
        notifications.show({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
          color: 'red'
        })
      }
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const toggleFavorite = async (productId: number) => {
    try {
      const isAdded = await productsApi.toggleFavorite(productId)
      dispatch({ type: 'TOGGLE_FAVORITE', payload: productId })
      
      notifications.show({
        title: isAdded ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        message: isAdded ? '‚ù§Ô∏è –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : 'üíî –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        color: isAdded ? 'pink' : 'gray'
      })
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
        color: 'red'
      })
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const getCartItemsCount = (): number => {
    return state.cart?.items.length ?? 0
  }

  const getCartTotal = (): number => {
    return state.cart?.totalAmount ?? 0
  }

  const getFilteredCart = (): Cart | null => {
    if (!state.cart) return null
    
    console.log('üîç getFilteredCart: removedCartItemIds =', Array.from(state.removedCartItemIds))
    console.log('üîç getFilteredCart: –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã =', state.cart.items.map(item => ({ id: item.id, name: item.productName })))
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ (–ø–æ productId)
    const filteredItems = state.cart.items.filter(item => {
      const shouldKeep = item.productId && !state.removedCartItemIds.has(item.productId)
      if (!shouldKeep && item.productId) {
        console.log(`üö´ –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç productId: ${item.productId} (${item.productName})`)
      }
      return shouldKeep
    })
    
    console.log('‚úÖ getFilteredCart: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã =', filteredItems.map(item => ({ id: item.id, name: item.productName })))
    
    return {
      ...state.cart,
      items: filteredItems
    }
  }

  const isFavorite = (productId: number): boolean => {
    return state.favorites.includes(productId)
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    loadCategories()
    // –ö–æ—Ä–∑–∏–Ω–∞ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ AuthContext –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É
  }, [])

  const contextValue: ProductsContextType = {
    state,
    loadCategories,
    loadProducts,
    loadMoreProducts,
    loadProduct,
    searchProducts,
    loadCart,
    addToCart,
    updateCartItem,
    removeFromCart,
    clearCart,
    setFilters,
    clearFilters,
    loadFavorites,
    toggleFavorite,
    getCartItemsCount,
    getCartTotal,
    getFilteredCart,
    isFavorite
  }

  return (
    <ProductsContext.Provider value={contextValue}>
      {children}
    </ProductsContext.Provider>
  )
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export function useProducts() {
  const context = useContext(ProductsContext)
  if (!context) {
    throw new Error('useProducts must be used within a ProductsProvider')
  }
  return context
}

export default ProductsContext 