/**
 * @file: AuthContext.tsx
 * @description: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PizzaNat API
 * @dependencies: AuthApi, —Ç–∏–ø—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @created: 2025-01-07
 * @updated: 2025-01-20
 */

import React, { createContext, useContext, useReducer, useEffect } from 'react'
import { notifications } from '@mantine/notifications'
import { AuthApi } from '../services/authApi'
import type {
  User,
  AuthTokens,
  AuthState,
  AuthAction,
  LoginRequest,
  RegisterRequest,
  SmsAuthRequest,
  SmsVerifyRequest,
  SmsAuthResponse,
  TelegramAuthResponse,
  TelegramStatusResponse
} from '../types/auth'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthContextType extends AuthState {
  login: (request: LoginRequest) => Promise<void>
  register: (request: RegisterRequest) => Promise<void>
  sendSmsCode: (request: SmsAuthRequest) => Promise<SmsAuthResponse>
  verifySmsCode: (request: SmsVerifyRequest) => Promise<void>
  initTelegramAuth: (phoneNumber?: string) => Promise<TelegramAuthResponse>
  checkTelegramStatus: (authToken: string) => Promise<TelegramStatusResponse | null>
  logout: () => Promise<void>
  refreshToken: () => Promise<void>
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const AuthContext = createContext<AuthContextType | undefined>(undefined)

// –†–µ–¥—å—é—Å–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
function authReducer(state: AuthState, action: AuthAction): AuthState {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, isLoading: action.payload, error: null }
    case 'SET_USER':
      return {
        ...state,
        user: action.payload.user,
        tokens: action.payload.tokens,
        isLoading: false,
        error: null
      }
    case 'SET_ERROR':
      return { ...state, error: action.payload, isLoading: false }
    case 'LOGOUT':
      return { user: null, tokens: null, isLoading: false, error: null }
    case 'CLEAR_ERROR':
      return { ...state, error: null }
    default:
      return state
  }
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: AuthState = {
  user: null,
  tokens: null,
  isLoading: true,
  error: null
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const STORAGE_KEYS = {
  USER: 'pizzanat_user',
  TOKENS: 'pizzanat_tokens'
}

const saveToStorage = (user: User, tokens: AuthTokens) => {
  try {
    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(user))
    localStorage.setItem(STORAGE_KEYS.TOKENS, JSON.stringify(tokens))
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error)
  }
}

const clearStorage = () => {
  localStorage.removeItem(STORAGE_KEYS.USER)
  localStorage.removeItem(STORAGE_KEYS.TOKENS)
}

const loadFromStorage = (): { user: User; tokens: AuthTokens } | null => {
  try {
    const userStr = localStorage.getItem(STORAGE_KEYS.USER)
    const tokensStr = localStorage.getItem(STORAGE_KEYS.TOKENS)

    if (userStr && tokensStr) {
      const user = JSON.parse(userStr)
      const tokens = JSON.parse(tokensStr)
      return { user, tokens }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error)
    clearStorage()
  }

  return null
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthProviderProps {
  children: React.ReactNode
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [state, dispatch] = useReducer(authReducer, initialState)

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadStoredAuth = async () => {
      try {
        const stored = loadFromStorage()
        if (stored) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
          try {
            const profile = await AuthApi.getProfile()
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            const updatedUser: User = {
              id: profile.id,
              username: profile.username,
              fullName: profile.fullName,
              phoneNumber: profile.phoneNumber,
              telegramId: profile.telegramId,
              role: profile.role,
              createdAt: profile.createdAt
            }

            dispatch({ type: 'SET_USER', payload: { user: updatedUser, tokens: stored.tokens } })
            console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω')
          } catch (error) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
            clearStorage()
            dispatch({ type: 'SET_LOADING', payload: false })
          }
        } else {
          dispatch({ type: 'SET_LOADING', payload: false })
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
        clearStorage()
        dispatch({ type: 'SET_LOADING', payload: false })
      }
    }

    loadStoredAuth()
  }, [])

  // Email/Password –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  const login = async (request: LoginRequest) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true })
      const response = await AuthApi.login(request)

      console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞:', response)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!response.user || !response.token) {
        console.error('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', response)
        throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const user: User = {
        id: response.user!.id,
        username: response.user!.username,
        fullName: response.user!.fullName,
        phoneNumber: response.user!.phoneNumber,
        telegramId: response.user!.telegramId,
        role: response.user!.role
      }

      const tokens: AuthTokens = {
        access_token: response.token
      }

      saveToStorage(user, tokens)
      dispatch({ type: 'SET_USER', payload: { user, tokens } })

      notifications.show({
        title: '–£—Å–ø–µ—à–Ω–æ!',
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        color: 'green'
      })
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', error)
      dispatch({ type: 'SET_ERROR', payload: error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' })
      notifications.show({
        title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
        message: error.message || '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        color: 'red'
      })
      throw error
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }

  const register = async (request: RegisterRequest) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true })
      const response = await AuthApi.register(request)

      console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!response.user || !response.token) {
        console.error('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response)
        throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const user: User = {
        id: response.user!.id,
        username: response.user!.username,
        fullName: response.user!.fullName,
        phoneNumber: response.user!.phoneNumber,
        telegramId: response.user!.telegramId,
        role: response.user!.role
      }

      const tokens: AuthTokens = {
        access_token: response.token
      }

      saveToStorage(user, tokens)
      dispatch({ type: 'SET_USER', payload: { user, tokens } })

      notifications.show({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
        color: 'green'
      })
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      dispatch({ type: 'SET_ERROR', payload: error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' })
      notifications.show({
        title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
        color: 'red'
      })
      throw error
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }

  // SMS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  const sendSmsCode = async (request: SmsAuthRequest): Promise<SmsAuthResponse> => {
    try {
      const response = await AuthApi.sendSmsCode(request)
      notifications.show({
        title: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        message: `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${response.maskedPhoneNumber || request.phoneNumber}`,
        color: 'blue'
      })
      return response
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS',
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS',
        color: 'red'
      })
      throw error
    }
  }

  const verifySmsCode = async (request: SmsVerifyRequest) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: true })
      const response = await AuthApi.verifySmsCode(request)

      console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', response)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      let user: User
      let tokens: AuthTokens

      if (response.user && response.token) {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AuthResponse
        user = {
          id: response.user!.id,
          username: response.user!.username,
          fullName: response.user!.fullName,
          phoneNumber: response.user!.phoneNumber,
          telegramId: response.user!.telegramId,
          role: response.user!.role
        }
        tokens = {
          access_token: response.token
        }
      } else if (response.token && !response.user) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user = {
          id: Date.now(), // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
          username: request.phoneNumber,
          phoneNumber: request.phoneNumber,
          role: 'USER'
        }
        tokens = {
          access_token: response.token
        }
        console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      } else {
        // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:', response)
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      }

      saveToStorage(user, tokens)
      dispatch({ type: 'SET_USER', payload: { user, tokens } })

      notifications.show({
        title: '–£—Å–ø–µ—à–Ω–æ!',
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        color: 'green'
      })
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
      dispatch({ type: 'SET_ERROR', payload: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' })
      notifications.show({
        title: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        message: error.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        color: 'red'
      })
      throw error
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false })
    }
  }

  // Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  const initTelegramAuth = async (phoneNumber?: string): Promise<TelegramAuthResponse> => {
    try {
      return await AuthApi.initTelegramAuth(phoneNumber)
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞ Telegram',
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é',
        color: 'red'
      })
      throw error
    }
  }

  const checkTelegramStatus = async (authToken: string) => {
    try {
      const response = await AuthApi.checkTelegramStatus(authToken)
      console.log('üîç –û—Ç–≤–µ—Ç checkTelegramStatus –≤ AuthContext:', response)

      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Å—Ç–∞—Ç—É—Å–∞: COMPLETED –∏ CONFIRMED
      if (response && (response.status === 'COMPLETED' || response.status === 'CONFIRMED')) {
        console.log('üéâ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç...')

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
        let token = response.token || response.authData?.token
        let userData = response.user || response.authData?.user

        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { token: !!token, userData: !!userData })
        console.log('üîç –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ authData:', response.authData)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if (!token) {
          console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Telegram API:', response)
          console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–æ–ª—è:', {
            'response.token': response.token,
            'response.authData?.token': response.authData?.token,
            'response.authData': response.authData
          })
          throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (userData) {
          const user: User = {
            id: userData.id,
            username: userData.phoneNumber || `user_${userData.id}`,
            fullName: undefined,
            phoneNumber: userData.phoneNumber,
            telegramId: userData.telegramId,
            role: userData.role
          }

          const tokens: AuthTokens = {
            access_token: token
          }

          console.log('üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram –æ—Ç–≤–µ—Ç–∞:', user)
          console.log('üîë –¢–æ–∫–µ–Ω—ã:', tokens)

          saveToStorage(user, tokens)
          dispatch({ type: 'SET_USER', payload: { user, tokens } })

          notifications.show({
            title: '–£—Å–ø–µ—à–Ω–æ!',
            message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Telegram',
            color: 'green'
          })
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–æ–∫–µ–Ω—É
          console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...')

          try {
            // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
            const tempTokens: AuthTokens = {
              access_token: token
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
            localStorage.setItem('pizzanat_tokens', JSON.stringify(tempTokens))

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const profile = await AuthApi.getProfile()

            const user: User = {
              id: profile.id,
              username: profile.username,
              fullName: profile.fullName,
              phoneNumber: profile.phoneNumber,
              telegramId: profile.telegramId,
              role: profile.role,
              createdAt: profile.createdAt
            }

            console.log('üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:', user)

            saveToStorage(user, tempTokens)
            dispatch({ type: 'SET_USER', payload: { user, tokens: tempTokens } })

            notifications.show({
              title: '–£—Å–ø–µ—à–Ω–æ!',
              message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Telegram',
              color: 'green'
            })
          } catch (profileError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError)
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
          }
        }
      }
      return response
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkTelegramStatus:', error)
      notifications.show({
        title: '–û—à–∏–±–∫–∞ Telegram',
        message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram',
        color: 'red'
      })
      throw error
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = async () => {
    try {
      if (state.tokens?.refresh_token) {
        await AuthApi.logout(state.tokens.refresh_token)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error)
    } finally {
      clearStorage()
      dispatch({ type: 'LOGOUT' })
      notifications.show({
        title: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        color: 'blue'
      })
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const refreshToken = async () => {
    try {
      if (!state.tokens?.refresh_token) {
        throw new Error('–ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞')
      }

      const response = await AuthApi.refreshToken(state.tokens.refresh_token)

      const tokens: AuthTokens = {
        access_token: response.token,
        refresh_token: state.tokens.refresh_token
      }

      const user: User = {
        id: response.user!.id,
        username: response.user!.username,
        fullName: response.user!.fullName,
        phoneNumber: response.user!.phoneNumber,
        telegramId: response.user!.telegramId,
        role: response.user!.role
      }

      saveToStorage(user, tokens)
      dispatch({ type: 'SET_USER', payload: { user, tokens } })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      await logout()
    }
  }

  const contextValue: AuthContextType = {
    ...state,
    login,
    register,
    sendSmsCode,
    verifySmsCode,
    initTelegramAuth,
    checkTelegramStatus,
    logout,
    refreshToken
  }

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  )
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export function useAuth(): AuthContextType {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider')
  }
  return context
}

export default AuthContext