/**
 * @file: authApi.ts
 * @description: API —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PizzaNat API
 * @dependencies: api.ts, auth types
 * @created: 2025-01-07
 * @updated: 2025-01-20
 */

import { apiClient } from './api'
import { API_ENDPOINTS } from '../config/api'
import type {
  AuthResponse,
  LoginRequest,
  RegisterRequest,
  SmsAuthRequest,
  SmsVerifyRequest,
  SmsAuthResponse,
  TelegramAuthResponse,
  TelegramInitRequest,
  TelegramStatusResponse,
  User
} from '../types/auth'

export class AuthApi {
  // Email/Password Authentication
  static async login(request: LoginRequest): Promise<AuthResponse> {
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username: request.username })
    const response = await apiClient.post(API_ENDPOINTS.AUTH.LOGIN, request)
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', response.data)
    return response.data
  }

  static async register(request: RegisterRequest): Promise<AuthResponse> {
    console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', {
      username: request.username,
      email: request.email,
      firstName: request.firstName,
      lastName: request.lastName,
      phone: request.phone
    })
    const response = await apiClient.post(API_ENDPOINTS.AUTH.REGISTER, request)
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', response.data)
    return response.data
  }

  // SMS Authentication
  static async sendSmsCode(request: SmsAuthRequest): Promise<SmsAuthResponse> {
    console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞:', { phoneNumber: request.phoneNumber })
    const response = await apiClient.post(API_ENDPOINTS.AUTH.SMS_SEND, request)
    console.log('‚úÖ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response.data)
    return response.data
  }

  static async verifySmsCode(request: SmsVerifyRequest): Promise<AuthResponse> {
    console.log('üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞:', {
      phoneNumber: request.phoneNumber,
      requestId: request.requestId
    })
    const response = await apiClient.post(API_ENDPOINTS.AUTH.SMS_VERIFY, request)
    console.log('‚úÖ SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', response.data)
    return response.data
  }

  // Telegram Authentication
  static async initTelegramAuth(phoneNumber?: string): Promise<TelegramAuthResponse> {
    try {
      console.log('üîµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
      console.log('üîß API Base URL:', import.meta.env.DEV ? '/api/v1' : 'https://api.pizzanat.ru/api/v1')
      console.log('üîß Full URL:', `${import.meta.env.DEV ? '/api/v1' : 'https://api.pizzanat.ru/api/v1'}${API_ENDPOINTS.AUTH.TELEGRAM_INIT}`)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π deviceId —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
      const deviceId = `web_telegram_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

      // –°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º deviceId (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ phoneNumber (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const requestData: TelegramInitRequest = {
        deviceId,
        ...(phoneNumber && { phoneNumber })
      }
      console.log('üîß –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', requestData)

      const response = await apiClient.post(API_ENDPOINTS.AUTH.TELEGRAM_INIT, requestData)

      console.log('‚úÖ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', response)
      console.log('‚úÖ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ:', response.data)
      console.log('‚úÖ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å—Ç–∞—Ç—É—Å:', response.status)
      console.log('‚úÖ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥–æ–ª–æ–≤–∫–∏:', response.headers)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!response.data) {
        throw new Error('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
      }

      const data = response.data
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –æ—Ç–≤–µ—Ç–∞:', {
        hasAuthToken: !!data.authToken,
        hasTelegramBotUrl: !!data.telegramBotUrl,
        hasExpiresAt: !!data.expiresAt,
        allFields: Object.keys(data)
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!data.authToken) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç authToken –≤ –æ—Ç–≤–µ—Ç–µ API. –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—è: ${Object.keys(data).join(', ')}`)
      }

      if (!data.telegramBotUrl) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramBotUrl –≤ –æ—Ç–≤–µ—Ç–µ API. –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—è: ${Object.keys(data).join(', ')}`)
      }

      return response.data
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', {
        ...(error.response?.status && { status: error.response.status }),
        ...(error.response?.statusText && { statusText: error.response.statusText }),
        ...(error.response?.data && { data: error.response.data }),
        ...(error.message && { message: error.message }),
        ...(error.config?.url && { url: error.config.url }),
        ...(error.config?.method && { method: error.config.method }),
        ...(error.code && { code: error.code })
      })

      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.response?.status === 400) {
        const errorData = error.response?.data
        let errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API'

        if (errorData?.message) {
          errorMessage = errorData.message
        } else if (errorData?.error) {
          errorMessage = errorData.error
        } else if (errorData?.detail) {
          errorMessage = errorData.detail
        }

        throw new Error(`–û—à–∏–±–∫–∞ 400: ${errorMessage}`)
      } else if (error.response?.status === 404) {
        throw new Error('Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
      } else if (error.response?.status === 405) {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ HTTP. –í–æ–∑–º–æ–∂–Ω–æ, API –æ–∂–∏–¥–∞–µ—Ç GET –≤–º–µ—Å—Ç–æ POST')
      } else if (error.response?.status === 429) {
        const errorData = error.response?.data
        let errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'

        if (errorData?.message) {
          errorMessage = errorData.message
        }

        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –¥–ª—è 429
        const rateLimitError = {
          code: 'ERR_BAD_REQUEST',
          message: errorMessage,
          details: errorData
        }

        throw rateLimitError
      } else if (error.response?.status >= 500) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      } else if (error.code === 'NETWORK_ERROR' || error.code === 'ERR_NETWORK') {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.')
      }

      throw error
    }
  }

  static async checkTelegramStatus(authToken: string): Promise<TelegramStatusResponse | null> {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram:', { authToken })
      const response = await apiClient.get(`${API_ENDPOINTS.AUTH.TELEGRAM_STATUS}/${authToken}`)

      console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ Telegram:', response)
      console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data)
      console.log('üìã –°—Ç–∞—Ç—É—Å:', response.data?.status)
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –æ—Ç–≤–µ—Ç–∞
      if (response.data) {
        console.log('üîç –í—Å–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞:', Object.keys(response.data))
        console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π:', {
          status: response.data.status,
          token: response.data.token,
          accessToken: response.data.accessToken,
          access_token: response.data.access_token,
          authToken: response.data.authToken,
          jwt: response.data.jwt,
          user: response.data.user,
          userData: response.data.userData,
          userInfo: response.data.userInfo,
          authData: response.data.authData
        })
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ authData
        if (response.data.authData) {
          console.log('üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ authData:', response.data.authData)
          console.log('üîç –ü–æ–ª—è –≤ authData:', Object.keys(response.data.authData))
          console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –≤ authData:', {
            token: response.data.authData.token,
            accessToken: response.data.authData.accessToken,
            access_token: response.data.authData.access_token,
            authToken: response.data.authData.authToken,
            jwt: response.data.authData.jwt,
            user: response.data.authData.user
          })
        }
      }

      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Å—Ç–∞—Ç—É—Å–∞: COMPLETED –∏ CONFIRMED
      if (response.data && (response.data.status === 'COMPLETED' || response.data.status === 'CONFIRMED')) {
        console.log('‚úÖ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', response.data)
        return response.data
      }

      console.log('‚è≥ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:', response.data?.status)
      return null
    } catch (error: any) {
      console.log('‚è≥ Telegram —Å—Ç–∞—Ç—É—Å –Ω–µ –≥–æ—Ç–æ–≤:', error.response?.status)
      console.log('‚è≥ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data)
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null
    }
  }

  // Token Management (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  static async refreshToken(refreshToken: string): Promise<AuthResponse> {
    const response = await apiClient.post(API_ENDPOINTS.AUTH.REFRESH, {
      refresh_token: refreshToken
    })
    return response.data
  }

  static async logout(refreshToken?: string): Promise<void> {
    if (refreshToken) {
      await apiClient.post(API_ENDPOINTS.AUTH.LOGOUT, {
        refresh_token: refreshToken
      })
    }
  }

  // User Profile
  static async getProfile(): Promise<User> {
    console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const response = await apiClient.get(API_ENDPOINTS.USER.PROFILE)
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', response.data)
    return response.data
  }

  static async updateProfile(data: Partial<User>): Promise<User> {
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', data)
    const response = await apiClient.put(API_ENDPOINTS.USER.PROFILE, data)
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data)
    return response.data
  }
} 