/**
 * @file: authApi.ts
 * @description: API —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @dependencies: api.ts, auth types
 * @created: 2024-12-19
 */

import { apiClient } from './api'
import { API_ENDPOINTS } from '../config/api'
import type {
  AuthResponse,
  LoginRequest,
  RegisterRequest,
  SmsAuthRequest,
  SmsVerifyRequest,
  SmsAuthResponse,
  TelegramAuthResponse,
  User
} from '../types/auth'

export class AuthApi {
  // Email/Password Authentication
  static async login(request: LoginRequest): Promise<AuthResponse> {
    const response = await apiClient.post(API_ENDPOINTS.AUTH.LOGIN, request)
    return response.data
  }

  static async register(request: RegisterRequest): Promise<AuthResponse> {
    const response = await apiClient.post(API_ENDPOINTS.AUTH.REGISTER, request)
    return response.data
  }

  // SMS Authentication
  static async sendSmsCode(request: SmsAuthRequest): Promise<SmsAuthResponse> {
    const response = await apiClient.post(API_ENDPOINTS.AUTH.SMS_SEND, request)
    return response.data
  }

  static async verifySmsCode(request: SmsVerifyRequest): Promise<AuthResponse> {
    const response = await apiClient.post(API_ENDPOINTS.AUTH.SMS_VERIFY, request)
    return response.data
  }

  // Telegram Authentication
  static async initTelegramAuth(): Promise<TelegramAuthResponse> {
    try {
      console.log('üîµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deviceId –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ
      const deviceId = `web_telegram_${Date.now()}`
      console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º deviceId:', deviceId)
      
      // API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å deviceId –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–∞–º–∏)
      const response = await apiClient.post(API_ENDPOINTS.AUTH.TELEGRAM_INIT, {
        deviceId: deviceId
      })
      
      console.log('‚úÖ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', response.data)
      return response.data
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url,
        method: error.config?.method
      })
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.response?.status === 400) {
        const errorData = error.response?.data
        let errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API'
        
        if (errorData?.message) {
          errorMessage = errorData.message
        } else if (errorData?.error) {
          errorMessage = errorData.error
        } else if (errorData?.detail) {
          errorMessage = errorData.detail
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ 400: ${errorMessage}`)
      } else if (error.response?.status === 404) {
        throw new Error('Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
      } else if (error.response?.status === 405) {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ HTTP. –í–æ–∑–º–æ–∂–Ω–æ, API –æ–∂–∏–¥–∞–µ—Ç GET –≤–º–µ—Å—Ç–æ POST')
      } else if (error.response?.status >= 500) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      }
      
      throw error
    }
  }

  static async checkTelegramStatus(sessionId: string): Promise<AuthResponse | null> {
    try {
      const response = await apiClient.get(`${API_ENDPOINTS.AUTH.TELEGRAM_STATUS}/${sessionId}`)
      return response.data
    } catch (error) {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null
    }
  }

  // Token Management
  static async refreshToken(refreshToken: string): Promise<AuthResponse> {
    const response = await apiClient.post(API_ENDPOINTS.AUTH.REFRESH, {
      refresh_token: refreshToken
    })
    return response.data
  }

  static async logout(refreshToken: string): Promise<void> {
    await apiClient.post(API_ENDPOINTS.AUTH.LOGOUT, {
      refresh_token: refreshToken
    })
  }

  // User Profile
  static async getProfile(): Promise<User> {
    const response = await apiClient.get(API_ENDPOINTS.USER.PROFILE)
    return response.data
  }

  static async updateProfile(data: Partial<User>): Promise<User> {
    const response = await apiClient.put(API_ENDPOINTS.USER.PROFILE, data)
    return response.data
  }
} 