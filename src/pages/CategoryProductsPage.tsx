/**
 * @file: CategoryProductsPage.tsx
 * @description: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @dependencies: Mantine, ProductsContext, React Router
 * @created: 2024-12-19
 */

import { useState, useEffect } from 'react'
import { useNavigate, useSearchParams } from 'react-router-dom'
import {
  Container,
  Title,
  Grid,
  Card,
  Image,
  Text,
  Group,
  Loader,
  Center,
  Stack,
  Alert,
  Badge,
  Button,
  TextInput,
  Select,
  Divider
} from '@mantine/core'
import { 
  IconAlertCircle,
  IconPizza,
  IconSearch,
  IconHeart,
  IconHeartFilled,
  IconShoppingCart,
  IconStar
} from '@tabler/icons-react'
import { useProducts } from '../contexts/ProductsContext'
import { productsApi } from '../services/productsApi'
import { SEOPageWrapper } from '../components/SEOHead'
import { AddToCartButton } from '../components/telegram/TelegramButton'
import { useTelegramPage } from '../components/telegram/TelegramApp'
import { ProductCardImage } from '../components/common/OptimizedImage'
import type { Product } from '../types/products'
import { PRODUCT_SORT_OPTIONS } from '../types/products'

export function CategoryProductsPage() {
  const navigate = useNavigate()
  const [searchParams] = useSearchParams()
  const {
    state: {
      categories,
      categoriesLoading,
      categoriesError,
      cart
    },
    loadCategories,
    addToCart,
    toggleFavorite,
    isFavorite
  } = useProducts()

  const [selectedCategory, setSelectedCategory] = useState<number | null>(null)
  const [categoryName, setCategoryName] = useState<string>('')
  const [sortBy, setSortBy] = useState<string>('popularity')
  const [searchValue, setSearchValue] = useState('')
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([])
  const [isLoadingFiltered, setIsLoadingFiltered] = useState(false)
  const [productsError, setProductsError] = useState<string | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const loadProductsWithCategory = async (categoryId: number, sortParam?: string) => {
    try {
      setIsLoadingFiltered(true)
      setProductsError(null)
      
      const response = await productsApi.getProductsByCategory(categoryId, {
        size: 20,
        page: 0,
        sort: sortParam
      })
      
      setFilteredProducts(response.products)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error)
      setProductsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã')
      setFilteredProducts([])
    } finally {
      setIsLoadingFiltered(false)
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadCategories()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä category
    const categoryParam = searchParams.get('category')
    if (categoryParam) {
      const categoryId = parseInt(categoryParam)
      setSelectedCategory(categoryId)
      loadProductsWithCategory(categoryId)
    }
  }, [searchParams])

  // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    if (selectedCategory && categories && categories.length > 0) {
      const category = categories.find(cat => cat.id === selectedCategory)
      setCategoryName(category?.name || '')
    }
  }, [selectedCategory, categories])

  // Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  useTelegramPage({
    title: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è - –î–ò–ú–ë–û –ü–∏—Ü—Ü–∞',
    backButton: true,
    backButtonText: '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é'
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (value: string | null) => {
    if (!value || !selectedCategory) return
    setSortBy(value)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç API
    let sortParam: string | undefined
    switch (value) {
      case 'price_asc':
        sortParam = 'price,asc'
        break
      case 'price_desc':
        sortParam = 'price,desc'
        break
      case 'name':
        sortParam = 'name,asc'
        break
      case 'newest':
        sortParam = 'id,desc'
        break
      case 'popularity':
      default:
        sortParam = undefined // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        break
    }
    
    loadProductsWithCategory(selectedCategory, sortParam)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  const handleAddToCart = (product: Product) => {
    console.log('üõí CategoryProductsPage: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', product.name)
    addToCart({
      productId: product.id,
      quantity: 1
    })
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
  const handleProductClick = (productId: number) => {
    console.log('üîó CategoryProductsPage: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞', productId)
    navigate(`/product/${productId}`)
  }

  return (
    <SEOPageWrapper
      title={`${categoryName} - –ú–µ–Ω—é –î–ò–ú–ë–û –ü–∏—Ü—Ü–∞ - –í–æ–ª–∂—Å–∫`}
      description={`${categoryName} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ –í–æ–ª–∂—Å–∫–µ. –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.`}
      keywords={`${categoryName}, –º–µ–Ω—é, –í–æ–ª–∂—Å–∫, –¥–æ—Å—Ç–∞–≤–∫–∞`}
      breadcrumbs={[
        { title: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
        { title: '–ú–µ–Ω—é', href: '/menu' },
        { title: categoryName, href: `/menu?category=${selectedCategory}` }
      ]}
    >
      <Container size="lg">
        <Stack gap="lg">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Title order={2} c="dark">
            üçï {categoryName}
          </Title>

          {/* –ü–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
          <Card shadow="sm" padding="md" radius="md" withBorder>
            <Grid>
              <Grid.Col span={{ base: 12, md: 8 }}>
                <TextInput
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é..."
                  leftSection={<IconSearch size="1rem" />}
                  value={searchValue}
                  onChange={(event) => setSearchValue(event.currentTarget.value)}
                />
              </Grid.Col>
              <Grid.Col span={{ base: 12, md: 4 }}>
                <Select
                  placeholder="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
                  data={PRODUCT_SORT_OPTIONS}
                  value={sortBy}
                  onChange={handleSortChange}
                />
              </Grid.Col>
            </Grid>
          </Card>

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
          {isLoadingFiltered && (
            <Center py="xl">
              <Stack align="center">
                <Loader size="lg" />
                <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</Text>
              </Stack>
            </Center>
          )}

          {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {productsError && (
            <Alert 
              variant="light" 
              color="red" 
              icon={<IconAlertCircle size="1rem" />}
              title="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
            >
              {productsError}
            </Alert>
          )}

          {/* –ü—Ä–æ–¥—É–∫—Ç—ã */}
          {!isLoadingFiltered && !productsError && filteredProducts.length > 0 && (
            <Grid>
              {filteredProducts.map((product) => (
                <Grid.Col key={product.id} span={{ base: 6, sm: 6, md: 4, lg: 3 }}>
                  <Card 
                    shadow="sm" 
                    padding="lg" 
                    radius="md" 
                    withBorder 
                    h="100%"
                    className="product-card-compact"
                    style={{ cursor: 'pointer' }}
                    onClick={() => handleProductClick(product.id)}
                  >
                    <Card.Section pos="relative">
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
                      <ProductCardImage 
                        src={product.imageUrl}
                        alt={product.name}
                      />

                      {/* –°–∫–∏–¥–∫–∞ */}
                      {product.discountPercent && product.discountPercent > 0 && (
                        <Badge
                          color="red"
                          variant="filled"
                          pos="absolute"
                          top={10}
                          right={10}
                          size="lg"
                        >
                          -{product.discountPercent}%
                        </Badge>
                      )}

                      {/* –ò–∑–±—Ä–∞–Ω–Ω–æ–µ */}
                      <div 
                        style={{
                          position: 'absolute',
                          top: 10,
                          left: 10,
                          cursor: 'pointer'
                        }}
                        onClick={(e) => {
                          e.stopPropagation()
                          toggleFavorite(product.id)
                        }}
                      >
                        {isFavorite(product.id) ? (
                          <IconHeartFilled size={24} color="#ff6b6b" />
                        ) : (
                          <IconHeart size={24} color="#fff" stroke={2} />
                        )}
                      </div>
                    </Card.Section>

                    <Stack justify="space-between" h="100%" pt="md">
                      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ */}
                      <Group justify="space-between" align="flex-start">
                        <Text fw={600} lineClamp={2} style={{ flexGrow: 1 }} className="product-title">
                          {product.name}
                        </Text>
                        <Badge 
                          color={product.available ? "orange" : "gray"} 
                          variant="light"
                          size="lg"
                          className="product-price"
                        >
                          {product.discountedPrice ? (
                            <>
                              <Text component="span" td="line-through" c="gray" size="sm">
                                {product.price} ‚ÇΩ
                              </Text>
                              {' '}
                              {product.discountedPrice} ‚ÇΩ
                            </>
                          ) : (
                            `${product.price} ‚ÇΩ`
                          )}
                        </Badge>
                      </Group>

                      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                      <Text size="sm" c="dimmed" lineClamp={3} style={{ flexGrow: 1 }}>
                        {product.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                      </Text>

                      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                      {product.weight && (
                        <Text size="xs" c="dimmed">
                          <strong>–í–µ—Å:</strong> {product.weight} –≥
                        </Text>
                      )}

                      <Divider my="xs" />

                      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É */}
                      <AddToCartButton
                        productName={product.name}
                        price={product.discountedPrice || product.price}
                        onClick={(e) => {
                          e?.stopPropagation()
                          console.log('üõë CategoryProductsPage: stopPropagation –≤—ã–∑–≤–∞–Ω')
                          handleAddToCart(product)
                        }}
                        disabled={!product.available}
                        inCart={cart?.items.some(item => item.productId === product.id) || false}
                      />
                    </Stack>
                  </Card>
                </Grid.Col>
              ))}
            </Grid>
          )}

          {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
          {!isLoadingFiltered && !productsError && filteredProducts.length === 0 && (
            <Card shadow="sm" padding="lg" radius="md" withBorder bg="yellow.0">
              <Stack align="center">
                <IconPizza size={48} color="#ffa500" />
                <Text c="yellow.7" size="lg" fw={500}>
                  –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </Text>
                <Text c="dimmed" ta="center">
                  –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
                </Text>
              </Stack>
            </Card>
          )}
        </Stack>
      </Container>
    </SEOPageWrapper>
  )
}