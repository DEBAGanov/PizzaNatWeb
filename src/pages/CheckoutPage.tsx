/**
 * @file: CheckoutPage.tsx
 * @description: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
 * @dependencies: Mantine, ProductsContext, AuthContext, API —Ç–µ—Å—Ç—ã
 * @created: 2025-01-24
 */

import { useState, useEffect, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import {
  Container,
  Stack,
  Title,
  Text,
  Group,
  Button,
  TextInput,
  Textarea,
  Radio,
  Stepper,
  Paper,
  Alert,
  Loader,
  Center,
  Divider,
  ActionIcon,
  SimpleGrid,
  Box,
  Image
} from '@mantine/core'
import {
  IconArrowLeft,
  IconCreditCard,
  IconTruck,
  IconMapPin,
  IconPhone,
  IconUser,
  IconInfoCircle,
  IconCheck,
  IconAlertTriangle,
} from '@tabler/icons-react'
import { useProducts } from '../contexts/ProductsContext'
import { notifications } from '@mantine/notifications'
import { productsApi } from '../services/productsApi'
import { useYandexMetrika } from '../components/analytics/YandexMetrika'
import { useVKPixel, cartItemsToVKEcommerce } from '../components/analytics/VKPixel'
import { cartItemsToEcommerce } from '../utils/ecommerceHelpers'
import type { CartItem, DeliveryEstimate as DeliveryEstimateType, CreateOrderRequest } from '../types/products'

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø DeliveryEstimateType –∫–∞–∫ DeliveryEstimate
type DeliveryEstimate = DeliveryEstimateType

interface OrderData {
  deliveryAddress?: string
  deliveryLocationId?: number
  contactName: string
  contactPhone: string
  comment?: string
  notes?: string
}

export function CheckoutPage() {
  const navigate = useNavigate()
  // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º user data –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π (–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)
  const { state: { cart, cartLoading }, loadCart } = useProducts()

  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  const YANDEX_METRIKA_ID = import.meta.env.VITE_YANDEX_METRIKA_ID || '103585127'
  const VK_PIXEL_ID = import.meta.env.VITE_VK_PIXEL_ID || '3695469'
  
  const { trackCheckoutStart, trackPurchase, trackPaymentMethod } = useYandexMetrika(YANDEX_METRIKA_ID)
  const { 
    trackCheckoutStart: trackVKCheckoutStart, 
    trackPurchase: trackVKPurchase, 
    trackPaymentMethodSelected: trackVKPaymentMethod 
  } = useVKPixel(VK_PIXEL_ID)
  
  const [activeStep, setActiveStep] = useState(0)
  const [loading, setLoading] = useState(false)
  const [deliveryEstimate, setDeliveryEstimate] = useState<DeliveryEstimate | null>(null)
  const [estimateLoading, setEstimateLoading] = useState(false)
  
  // Ref –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  const deliveryTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)
  
  // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const [deliveryType, setDeliveryType] = useState<'delivery' | 'pickup'>('delivery')
  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'sbp'>('sbp') // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –°–ë–ü, –Ω–∞–ª–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã

  const [orderData, setOrderData] = useState<OrderData>({
    contactName: '', // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–∞–º
    contactPhone: '', // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    deliveryAddress: '', // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    comment: ''
  })

  useEffect(() => {
    loadCart()
  }, [loadCart])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
  useEffect(() => {
    if (cart && cart.items.length > 0) {
      const ecommerceProducts = cartItemsToEcommerce(cart.items, { list: "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞" })
      trackCheckoutStart(ecommerceProducts, 1)
      
      // VK –ü–∏–∫—Å–µ–ª—å - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      const vkProducts = cartItemsToVKEcommerce(cart.items)
      trackVKCheckoutStart(vkProducts)
    }
  }, [cart?.id]) // eslint-disable-line react-hooks/exhaustive-deps

  // Cleanup —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (deliveryTimeoutRef.current) {
        clearTimeout(deliveryTimeoutRef.current)
      }
    }
  }, [])

  // –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
  const calculateDelivery = async (address: string) => {
    if (!address.trim() || !cart) return

    setEstimateLoading(true)
    try {
      const estimate = await productsApi.estimateDelivery(address, cart.totalAmount)
      setDeliveryEstimate(estimate)
      console.log('üöö –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:', { address, orderAmount: cart.totalAmount, estimate })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', error)
      setDeliveryEstimate(null)
    } finally {
      setEstimateLoading(false)
    }
  }


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å —Ä–µ–∞–ª-—Ç–∞–π–º —Ä–∞—Å—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
  const handleAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value
    setOrderData(prev => ({ ...prev, deliveryAddress: value }))
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (deliveryTimeoutRef.current) {
      clearTimeout(deliveryTimeoutRef.current)
    }
    
    // –û—á–∏—â–∞–µ–º –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    if (value.trim().length < 5) {
      setDeliveryEstimate(null)
      return
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    deliveryTimeoutRef.current = setTimeout(() => {
      calculateDelivery(value)
    }, 800) // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const formatPhone = (value: string) => {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const numbers = value.replace(/\D/g, '')
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    let formatted = numbers.startsWith('8') ? '7' + numbers.slice(1) : numbers
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º 7
    if (!formatted.startsWith('7')) {
      formatted = '7' + formatted
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 11 —Ü–∏—Ñ—Ä
    formatted = formatted.slice(0, 11)
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ +7 (XXX) XXX-XX-XX
    if (formatted.length >= 1) {
      formatted = '+7'
      if (numbers.length > 1) {
        const restNumbers = numbers.startsWith('7') ? numbers.slice(1) : numbers.startsWith('8') ? numbers.slice(1) : numbers
        if (restNumbers.length > 0) {
          formatted += ' (' + restNumbers.slice(0, 3)
          if (restNumbers.length > 3) {
            formatted += ') ' + restNumbers.slice(3, 6)
            if (restNumbers.length > 6) {
              formatted += '-' + restNumbers.slice(6, 8)
              if (restNumbers.length > 8) {
                formatted += '-' + restNumbers.slice(8, 10)
              }
            }
          } else {
            formatted += ')'
          }
        }
      }
    }
    
    return formatted
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const validatePhone = (phone: string) => {
    const numbers = phone.replace(/\D/g, '')
    return numbers.length === 11 && (numbers.startsWith('7') || numbers.startsWith('8'))
  }


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const handlePhoneChange = (value: string) => {
    const formatted = formatPhone(value)
    setOrderData(prev => ({ ...prev, contactPhone: formatted }))
  }


  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è API
  const getPhoneForApi = (formattedPhone: string) => {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const numbersOnly = formattedPhone.replace(/\D/g, '')
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001234567
    return numbersOnly
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const createOrder = async () => {
    if (!cart || cart.items.length === 0) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
        color: 'red'
      })
      return
    }

    if (!orderData.contactName.trim()) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
        color: 'red'
      })
      return
    }

    if (!orderData.contactPhone.trim() || !validatePhone(orderData.contactPhone)) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX',
        color: 'red'
      })
      return
    }

    if (deliveryType === 'delivery' && !orderData.deliveryAddress) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
        color: 'red'
      })
      return
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    trackPaymentMethod(paymentMethod)
    
    // VK –ü–∏–∫—Å–µ–ª—å - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    trackVKPaymentMethod(paymentMethod)
    
    setLoading(true)
    try {
      const requestData = deliveryType === 'delivery' 
        ? {
            deliveryAddress: orderData.deliveryAddress,
            contactName: orderData.contactName,
            contactPhone: getPhoneForApi(orderData.contactPhone),
            comment: orderData.comment || undefined,
            notes: `–û–ø–ª–∞—Ç–∞: ${paymentMethod === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É' : '–°–ë–ü'}`,
            paymentMethod: paymentMethod === 'cash' ? 'CASH' as const : 'SBP' as const,
            deliveryType: '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º'
          }
        : {
            deliveryLocationId: 1, // –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏
            contactName: orderData.contactName,
            contactPhone: getPhoneForApi(orderData.contactPhone),
            comment: orderData.comment || undefined,
            paymentMethod: paymentMethod === 'cash' ? 'CASH' as const : 'SBP' as const,
            deliveryType: '–°–∞–º–æ–≤—ã–≤–æ–∑'
          }

      const order = await productsApi.createOrder(requestData as CreateOrderRequest)
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
      const ecommerceProducts = cartItemsToEcommerce(cart.items, { list: "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞" })
      const deliveryCost = deliveryEstimate?.deliveryCost || 0
      trackPurchase(order.id.toString(), ecommerceProducts, {
        revenue: cart.totalAmount + deliveryCost,
        shipping: deliveryCost,
        affiliation: "–î–ò–ú–ë–û –ü–∏—Ü—Ü–∞ - –î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã"
      })
      
      // VK –ü–∏–∫—Å–µ–ª—å - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
      const vkProducts = cartItemsToVKEcommerce(cart.items)
      trackVKPurchase(vkProducts, order.id.toString())
        
      if (paymentMethod === 'cash') {
        // –ù–∞–ª–∏—á–Ω—ã–π –∑–∞–∫–∞–∑ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
        notifications.show({
          title: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
          message: `–ó–∞–∫–∞–∑ ‚Ññ${order.id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É`,
          color: 'green'
        })
        navigate(`/order-success/${order.id}`)
      } else {
        // –°–ë–ü - –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Æ–ö–∞—Å—Å–∞
        await redirectToPayment(order.id)
      }
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑',
        color: 'red'
      })
    } finally {
      setLoading(false)
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø–ª–∞—Ç—É –Æ–ö–∞—Å—Å–∞
  const redirectToPayment = async (orderId: number) => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId)
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ orders/{id}/payment-url
      try {
        const data = await productsApi.getPaymentUrl(orderId)
        console.log('üìã –û—Ç–≤–µ—Ç –æ—Ç /orders/{id}/payment-url:', data)
        
        if (data.paymentUrl) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ orders endpoint:', data.paymentUrl)
          window.location.href = data.paymentUrl
          return
        }
      } catch (orderUrlError) {
        console.warn('‚ö†Ô∏è Endpoint /orders/{id}/payment-url –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', orderUrlError)
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ yookassa/create
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ yookassa/create...')
      
      const paymentData = {
        orderId: orderId,
        method: paymentMethod === 'cash' ? 'CASH' : 'SBP',
        description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId} –≤ –î–ò–ú–ë–û –ü–∏—Ü—Ü–∞`,
        returnUrl: `${window.location.origin}/order-success/${orderId}`
      }
      
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', paymentData)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–ø—Ä—è–º—É—é
      const paymentResponse = await productsApi.createYookassaPayment(paymentData)
      console.log('üìã –û—Ç–≤–µ—Ç –æ—Ç yookassa/create:', paymentResponse)
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Æ–ö–∞—Å—Å–∞
      const confirmationUrl = paymentResponse.confirmation?.confirmation_url || paymentResponse.confirmation_url
      
      if (confirmationUrl) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç –Æ–ö–∞—Å—Å–∞:', confirmationUrl)
        window.location.href = confirmationUrl
      } else {
        console.error('‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', paymentResponse)
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã')
      }
      
    } catch (error: any) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã',
        color: 'red'
      })
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã:', error)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
      const isMinimumOrderMet = cart && cart.totalAmount >= 300

  if (cartLoading) {
    return (
      <Container size="md" py="xl">
        <Center>
          <Stack align="center" gap="md">
            <Loader size="lg" color="orange" />
            <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</Text>
          </Stack>
        </Center>
      </Container>
    )
  }

  if (!cart || cart.items.length === 0) {
    return (
      <Container size="md" py="xl">
        <Alert 
          icon={<IconAlertTriangle size={16} />} 
          title="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" 
          color="orange"
        >
          –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
          <Group mt="md">
            <Button variant="light" onClick={() => navigate('/menu')}>
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
            </Button>
          </Group>
        </Alert>
      </Container>
    )
  }

  return (
    <Container size="lg" py="md">
      <Stack gap="lg">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Group>
          <ActionIcon 
            variant="light" 
            size="lg"
            onClick={() => navigate('/cart')}
          >
            <IconArrowLeft size={20} />
          </ActionIcon>
          <Title order={1} c="orange.7">
            üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          </Title>
        </Group>

        {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã */}
        {!isMinimumOrderMet && (
          <Alert 
            icon={<IconInfoCircle size={16} />} 
            title="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞" 
            color="orange"
          >
            –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 300 ‚ÇΩ. 
                            –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {cart.totalAmount} ‚ÇΩ
          </Alert>
        )}

        <SimpleGrid cols={{ base: 1, lg: 2 }} spacing="xl">
          {/* –§–æ—Ä–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è */}
          <Stack gap="lg">
            <Stepper active={activeStep} onStepClick={setActiveStep} breakpoint="sm">
              {/* –®–∞–≥ 1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã */}
              <Stepper.Step 
                label="–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã" 
                description="–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ"
                icon={<IconTruck size={18} />}
              >
                <Stack gap="md">
                  <Radio.Group
                    value={deliveryType}
                    onChange={(value: 'delivery' | 'pickup') => setDeliveryType(value)}
                  >
                    <Group mt="xs">
                      <Radio value="delivery" label="–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º" />
                      <Radio value="pickup" label="–°–∞–º–æ–≤—ã–≤–æ–∑" />
                    </Group>
                  </Radio.Group>

                  {deliveryType === 'delivery' ? (
                    <Stack gap="md">
                      <TextInput
                        label="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                        placeholder="–õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 10"
                        value={orderData.deliveryAddress || ''}
                        onChange={handleAddressChange}
                        leftSection={<IconMapPin size={16} />}
                        required
                        description="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
                      />
                      
                      {estimateLoading && (
                        <Group gap="xs">
                          <Loader size="xs" />
                          <Text size="sm" c="dimmed">–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É...</Text>
                        </Group>
                      )}
                      
                      {deliveryEstimate && (
                        <Alert icon={<IconInfoCircle size={16} />} color="blue" variant="light">
                          <Stack gap="xs">
                            <Text size="sm">
                              <strong>–†–∞–π–æ–Ω:</strong> {deliveryEstimate.zoneName}
                            </Text>
                            <Text size="sm">
                              <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {
                                deliveryEstimate.baseCost 
                                  ? `${deliveryEstimate.baseCost} ‚ÇΩ${deliveryEstimate.isDeliveryFree ? ' (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç ' + deliveryEstimate.freeDeliveryThreshold + ' ‚ÇΩ)' : ''}`
                                  : deliveryEstimate.isDeliveryFree 
                                    ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' 
                                    : `${deliveryEstimate.deliveryCost} ‚ÇΩ`
                              }
                            </Text>
                            <Text size="sm">
                              <strong>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {deliveryEstimate.estimatedTime}
                            </Text>
                          </Stack>
                        </Alert>
                      )}
                    </Stack>
                  ) : (
                    <Alert icon={<IconInfoCircle size={16} />} color="green" variant="light">
                      <Text size="sm">
                        <strong>–ê–¥—Ä–µ—Å:</strong> –≥. –í–æ–ª–∂—Å–∫, —É–ª. –®–µ—Å—Ç–∞–∫–æ–≤–∞, –¥.1–ë
                      </Text>
                      <Text size="sm">
                        <strong>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</strong> 10:00 - 20:00
                      </Text>
                      <Text size="sm">
                        <strong>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</strong> 15-25 –º–∏–Ω—É—Ç
                      </Text>
                    </Alert>
                  )}

                  {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
                  <Box mt="lg">
                    <Text size="sm" fw={600} mb="xs">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
                    <Stack gap="md">
                      <TextInput
                        label="–ò–º—è"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                        value={orderData.contactName}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setOrderData(prev => ({ ...prev, contactName: e.target.value }))}
                        leftSection={<IconUser size={16} />}
                        required
                      />
                      
                      <TextInput
                        label="–¢–µ–ª–µ—Ñ–æ–Ω"
                        placeholder="+7 (900) 123-45-67"
                        value={orderData.contactPhone}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handlePhoneChange(e.target.value)}
                        leftSection={<IconPhone size={16} />}
                        error={orderData.contactPhone && !validatePhone(orderData.contactPhone) ? '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞' : null}
                        required
                      />
                      
                      <Textarea
                        label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
                        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                        value={orderData.comment}
                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setOrderData(prev => ({ ...prev, comment: e.target.value }))}
                        minRows={3}
                      />
                    </Stack>
                  </Box>
                </Stack>
              </Stepper.Step>

              {/* –®–∞–≥ 2: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
              <Stepper.Step 
                label="–û–ø–ª–∞—Ç–∞" 
                description="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
                icon={<IconCreditCard size={18} />}
              >
                <Stack gap="md">
                  <Radio.Group
                    value={paymentMethod}
                    onChange={(value: 'cash' | 'sbp') => setPaymentMethod(value)}
                  >
                    <Stack gap="sm">
                      <Radio 
                        value="sbp" 
                        label={
                          <Group gap="xs" align="center">
                            <Image 
                              src="/sbp-logo.png" 
                              alt="–°–ë–ü –ª–æ–≥–æ—Ç–∏–ø" 
                              h={24} 
                              w="auto" 
                              fit="contain"
                            />
                            <Text>–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</Text>
                          </Group>
                        } 
                      />
                      {/* –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –°–ë–ü */}
                      {/* <Radio 
                        value="cash" 
                        label={
                          <Group gap="xs">
                            <IconCash size={16} />
                            <Text>–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É</Text>
                          </Group>
                        } 
                      /> */}
                    </Stack>
                  </Radio.Group>

                  {paymentMethod !== 'cash' && (
                    <Alert icon={<IconInfoCircle size={16} />} color="blue" variant="light">
                      <Text size="sm">
                        –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –Æ–ö–∞—Å—Å–∞
                      </Text>
                    </Alert>
                  )}
                </Stack>
              </Stepper.Step>
            </Stepper>

            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º */}
            <Group justify="space-between" mt="xl">
              <Button 
                variant="default" 
                onClick={() => setActiveStep(prev => Math.max(0, prev - 1))}
                disabled={activeStep === 0}
              >
                –ù–∞–∑–∞–¥
              </Button>
              
              {activeStep < 1 ? (
                <Button 
                  onClick={() => setActiveStep(prev => Math.min(1, prev + 1))}
                  color="orange"
                >
                  –î–∞–ª–µ–µ
                </Button>
              ) : (
                <Button 
                  onClick={createOrder}
                  color="orange"
                  loading={loading}
                  disabled={!isMinimumOrderMet}
                  leftSection={<IconCheck size={18} />}
                >
                  –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </Button>
              )}
            </Group>
          </Stack>

          {/* –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —à–∞–≥–µ –æ–ø–ª–∞—Ç—ã */}
          {activeStep === 1 && (
            <Paper shadow="sm" p="lg" radius="md" withBorder h="fit-content">
              <Stack gap="md">
                <Title order={3}>–í–∞—à –∑–∞–∫–∞–∑</Title>
                
                <Divider />
                
                {/* –¢–æ–≤–∞—Ä—ã */}
                <Stack gap="sm">
                  {cart.items.slice(0, 3).map((item: CartItem) => (
                    <Group key={item.id} justify="space-between">
                      <div style={{ flex: 1 }}>
                        <Text size="sm" lineClamp={1}>{item.productName}</Text>
                        <Text size="xs" c="dimmed">{item.quantity} —à—Ç.</Text>
                      </div>
                      <Text size="sm" fw={600}>{item.subtotal} ‚ÇΩ</Text>
                    </Group>
                  ))}
                  
                  {cart.items.length > 3 && (
                    <Text size="sm" c="dimmed" ta="center">
                      ... –∏ –µ—â–µ {cart.items.length - 3} —Ç–æ–≤–∞—Ä(–æ–≤)
                    </Text>
                  )}
                </Stack>
                
                <Divider />
                
                {/* –ò—Ç–æ–≥–∏ */}
                <Stack gap="xs">
                  <Group justify="space-between">
                    <Text>–¢–æ–≤–∞—Ä—ã ({cart.items.length})</Text>
                    <Text>{cart.totalAmount} ‚ÇΩ</Text>
                  </Group>
                  
                  <Group justify="space-between">
                    <Text>–î–æ—Å—Ç–∞–≤–∫–∞</Text>
                    <Text>
                      {deliveryType === 'pickup' 
                        ? '–°–∞–º–æ–≤—ã–≤–æ–∑' 
                        : deliveryEstimate?.baseCost
                          ? deliveryEstimate.isDeliveryFree
                            ? `${deliveryEstimate.baseCost} ‚ÇΩ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)`
                            : `${deliveryEstimate.deliveryCost} ‚ÇΩ`
                          : deliveryEstimate?.isDeliveryFree 
                            ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
                            : deliveryEstimate?.deliveryCost 
                              ? `${deliveryEstimate.deliveryCost} ‚ÇΩ`
                              : '–†–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è'
                      }
                    </Text>
                  </Group>
                  
                  <Divider />
                  
                  <Group justify="space-between">
                    <Text fw={600} size="lg">–ò—Ç–æ–≥–æ</Text>
                    <Text fw={700} size="xl" c="orange.7">
                      {cart.totalAmount + (deliveryEstimate?.isDeliveryFree === false ? deliveryEstimate.deliveryCost : 0)} ‚ÇΩ
                    </Text>
                  </Group>
                </Stack>
              </Stack>
            </Paper>
          )}
        </SimpleGrid>
      </Stack>
    </Container>
  )
}