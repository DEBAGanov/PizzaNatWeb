/**
 * @file: CartPage.tsx
 * @description: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
 * @dependencies: Mantine, ProductsContext, React Router
 * @created: 2025-01-24
 */

import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import {
  Container,
  Stack,
  Title,
  Card,
  Text,
  Group,
  Button,
  Image,
  NumberInput,
  ActionIcon,
  Divider,
  Paper,
  Badge,
  Center,
  Loader,
  Alert,
  ThemeIcon,
  SimpleGrid,
  ScrollArea
} from '@mantine/core'
import {
  IconShoppingCart,
  IconTrash,
  IconPlus,
  IconMinus,
  IconArrowLeft,
  IconCreditCard,
  IconInfoCircle,
  IconCheck,
  IconAlertTriangle
} from '@tabler/icons-react'
import { useProducts } from '../contexts/ProductsContext'
import { SEOPageWrapper } from '../components/SEOHead'
import { OrderButton } from '../components/telegram/TelegramButton'
import { useTelegramPage } from '../components/telegram/TelegramApp'
import { notifications } from '@mantine/notifications'
import type { CartItem } from '../types/products'

export function CartPage() {
  const navigate = useNavigate()
  const { 
    state: { cartLoading, cartError },
    updateCartItem, 
    removeFromCart, 
    loadCart,
    getFilteredCart
  } = useProducts()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É (–±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
  const cart = getFilteredCart()
  console.log('üõí CartPage: –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É –æ—Ç getFilteredCart =', cart?.items?.map(item => ({ id: item.id, name: item.productName })))

  const [updateLoading, setUpdateLoading] = useState<number | null>(null)

  // Telegram Web App —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
  useTelegramPage('cart')

  useEffect(() => {
    loadCart()
  }, [loadCart])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  const handleUpdateQuantity = async (productId: number, newQuantity: number) => {
    if (newQuantity < 1) return
    
    if (!productId) {
      console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –ø—É—Å—Ç—ã–º productId')
      return
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π loading –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    setUpdateLoading(productId)
    try {
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ productId:', { productId, newQuantity })
      await updateCartItem(productId, { quantity: newQuantity })
      // –£—Å–ø–µ—Ö - updateCartItem —É–∂–µ –ø–æ–∫–∞–∑–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    } catch (error: any) {
      // –û—à–∏–±–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ updateCartItem, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π loading —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      setUpdateLoading(null)
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const handleRemoveItem = async (productId: number) => {
    if (!productId) {
      console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –ø—É—Å—Ç—ã–º productId')
      return
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π loading –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    setUpdateLoading(productId)
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ productId:', productId)
      await removeFromCart(productId)
      // –£—Å–ø–µ—Ö - removeFromCart —É–∂–µ –ø–æ–∫–∞–∑–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    } catch (error: any) {
      // –û—à–∏–±–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ removeFromCart, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error)
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π loading —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      setUpdateLoading(null)
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
  const handleCheckout = () => {
    navigate('/checkout')
  }

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é
  const handleBackToMenu = () => {
    navigate('/menu')
  }

  if (cartLoading && !cart) {
    return (
      <Container size="md" py="xl">
        <Center>
          <Stack align="center" gap="md">
            <Loader size="lg" color="orange" />
            <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</Text>
          </Stack>
        </Center>
      </Container>
    )
  }

  if (cartError) {
    return (
      <Container size="md" py="xl">
        <Alert 
          icon={<IconAlertTriangle size={16} />} 
          title="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã" 
          color="red"
        >
          {cartError}
          <Group mt="md">
            <Button variant="light" onClick={() => loadCart()}>
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
            <Button variant="outline" onClick={handleBackToMenu}>
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            </Button>
          </Group>
        </Alert>
      </Container>
    )
  }

  const isEmpty = !cart || cart.items.length === 0

  if (isEmpty) {
    return (
      <Container size="md" py="xl">
        <Stack align="center" gap="xl">
          <ThemeIcon size={120} color="orange" variant="light">
            <IconShoppingCart size={60} />
          </ThemeIcon>
          
          <Stack align="center" gap="md">
            <Title order={2} ta="center">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</Title>
            <Text size="lg" c="dimmed" ta="center">
              –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </Text>
          </Stack>

          <Button 
            size="lg" 
            color="orange"
            leftSection={<IconArrowLeft size={20} />}
            onClick={handleBackToMenu}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
          </Button>
        </Stack>
      </Container>
    )
  }

  return (
    <SEOPageWrapper 
      page="cart"
      customSeo={{
        noIndex: true // –ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è
      }}
    >
      <Container size="md" py="md">
        <Stack gap="lg">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <Group justify="space-between" align="center">
          <Group>
            <ActionIcon 
              variant="light" 
              size="lg"
              onClick={handleBackToMenu}
            >
              <IconArrowLeft size={20} />
            </ActionIcon>
            <Title order={1} c="orange.7">
              üõí –ö–æ—Ä–∑–∏–Ω–∞
            </Title>
          </Group>
          <Badge size="lg" color="orange" variant="light">
            {cart.items.length} —Ç–æ–≤–∞—Ä{cart.items.length > 1 ? '–∞' : ''}
          </Badge>
        </Group>

        <SimpleGrid cols={{ base: 1, md: 2 }} spacing="lg">
          {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
          <Stack gap="md">
            <ScrollArea.Autosize mah={600} offsetScrollbars>
              <Stack gap="md">
                {cart.items.map((item: CartItem) => {
                  if (!item.id) {
                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –±–µ–∑ ID:', item)
                    return null
                  }
                  return (
                  <Card key={item.id} shadow="sm" padding="md" radius="md" withBorder>
                    <Group gap="md" align="flex-start">
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                      <Image
                        src={item.productImageUrl}
                        alt={item.productName}
                        w={80}
                        h={80}
                        radius="md"
                        fallbackSrc="/placeholder-food.jpg"
                      />

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                      <Stack gap="xs" style={{ flex: 1 }}>
                        <Group justify="space-between" align="flex-start">
                          <div>
                            <Text fw={600} size="md">{item.productName}</Text>
                            {item.notes && (
                              <Text size="sm" c="dimmed">{item.notes}</Text>
                            )}
                          </div>
                          <ActionIcon
                            color="red"
                            variant="light"
                            size="sm"
                            loading={updateLoading === item.productId}
                            disabled={cartLoading || updateLoading === item.productId}
                            onClick={() => handleRemoveItem(item.productId)}
                          >
                            <IconTrash size={16} />
                          </ActionIcon>
                        </Group>

                        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
                        <Group justify="space-between" align="center">
                          <Group gap="xs">
                            <ActionIcon
                              variant="outline"
                              size="sm"
                              disabled={item.quantity <= 1 || cartLoading || updateLoading === item.productId}
                              onClick={() => handleUpdateQuantity(item.productId, item.quantity - 1)}
                            >
                              <IconMinus size={14} />
                            </ActionIcon>
                            
                            <NumberInput
                              value={item.quantity}
                              onChange={(value) => handleUpdateQuantity(item.productId, Number(value) || 1)}
                              min={1}
                              max={99}
                              size="sm"
                              w={60}
                              hideControls
                              disabled={cartLoading || updateLoading === item.productId}
                            />
                            
                            <ActionIcon
                              variant="outline"
                              size="sm"
                              disabled={item.quantity >= 99 || cartLoading || updateLoading === item.productId}
                              onClick={() => handleUpdateQuantity(item.productId, item.quantity + 1)}
                            >
                              <IconPlus size={14} />
                            </ActionIcon>
                          </Group>

                          <Text fw={600} size="lg" c="orange.7">
                            {item.subtotal} ‚ÇΩ
                          </Text>
                        </Group>
                      </Stack>
                    </Group>
                  </Card>
                  )
                })}
              </Stack>
            </ScrollArea.Autosize>
          </Stack>

          {/* –ò—Ç–æ–≥–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */}
          <Stack gap="md">
            <Paper shadow="sm" p="md" radius="md" withBorder>
              <Stack gap="md">
                <Title order={3}>–ò—Ç–æ–≥–æ</Title>
                
                <Divider />
                
                <Group justify="space-between">
                  <Text>–¢–æ–≤–∞—Ä—ã ({cart.items.length})</Text>
                  <Text>{cart.totalAmount} ‚ÇΩ</Text>
                </Group>
                
                <Group justify="space-between">
                  <Text>–î–æ—Å—Ç–∞–≤–∫–∞</Text>
                  <Text c="dimmed">–†–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏</Text>
                </Group>
                
                <Divider />
                
                <Group justify="space-between">
                  <Text fw={600} size="lg">–ö –æ–ø–ª–∞—Ç–µ</Text>
                  <Text fw={700} size="xl" c="orange.7">
                    –æ—Ç {cart.totalAmount} ‚ÇΩ
                  </Text>
                </Group>

                <OrderButton
                  total={cart?.totalAmount || 0}
                  itemsCount={cart?.items?.length || 0}
                  onClick={handleCheckout}
                  disabled={cartLoading}
                />

                <Alert 
                  icon={<IconInfoCircle size={16} />} 
                  color="blue" 
                  variant="light"
                >
                  <Text size="sm">
                    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: 300 ‚ÇΩ
                  </Text>
                </Alert>
              </Stack>
            </Paper>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Paper shadow="sm" p="md" radius="md" withBorder>
              <Stack gap="sm">
                <Group>
                  <ThemeIcon size="sm" color="green" variant="light">
                    <IconCheck size={14} />
                  </ThemeIcon>
                  <Text size="sm">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1000 ‚ÇΩ</Text>
                </Group>
                
                <Group>
                  <ThemeIcon size="sm" color="blue" variant="light">
                    <IconInfoCircle size={14} />
                  </ThemeIcon>
                  <Text size="sm">–î–æ—Å—Ç–∞–≤–∫–∞ 30-60 –º–∏–Ω—É—Ç</Text>
                </Group>
                
                <Group>
                  <ThemeIcon size="sm" color="orange" variant="light">
                    <IconCreditCard size={14} />
                  </ThemeIcon>
                  <Text size="sm">–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏</Text>
                </Group>
              </Stack>
            </Paper>
          </Stack>
        </SimpleGrid>
      </Stack>
    </Container>
    </SEOPageWrapper>
  )
}