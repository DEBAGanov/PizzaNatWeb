const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
function transliterate(text) {
  const map = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—å': '', '—ã': 'y', '—ä': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
    '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
    '–¨': '', '–´': 'Y', '–™': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  };
  
  return text.split('').map(char => map[char] || char).join('');
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ—Ç—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–∞
const zelenodolskKidsKeywords = [
  // –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø (8 —Å—Ç—Ä–∞–Ω–∏—Ü)
  '–¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≥–¥–µ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫', 
  '–≥–¥–µ –æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–≥–¥–µ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–≥–¥–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç—Å–∫–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –ê–ù–ò–ú–ê–¢–û–†–´ (4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  '–¥–µ—Ç—Å–∫–∏–µ –∞–Ω–∏–º–∞—Ç–æ—Ä—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–∞–Ω–∏–º–∞—Ç–æ—Ä—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–¥–µ—Ç—Å–∫–∏–µ –∞–Ω–∏–º–∞—Ç–æ—Ä—ã –≤ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–µ',
  '–¥–µ—Ç—Å–∫–∏–µ –∞–Ω–∏–º–∞—Ç–æ—Ä—ã –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –ú–ï–ù–Æ –ò –ï–î–ê (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  '–º–µ–Ω—é –Ω–∞ –¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–µ–¥–∞ –Ω–∞ –¥–µ—Ç—Å–∫–æ–º –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –ü–û–î–ê–†–ö–ò (7 —Å—Ç—Ä–∞–Ω–∏—Ü)
  '–¥–µ—Ç—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–¥–µ—Ç—Å–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '—á—Ç–æ –ø–æ–¥–∞—Ä–∏—Ç—å —Ä–µ–±–µ–Ω–∫—É –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø–æ–¥–∞—Ä–æ–∫ –º–∞–ª—å—á–∏–∫—É –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø–æ–¥–∞—Ä–æ–∫ –¥–µ–≤–æ—á–∫–µ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø–æ–¥–∞—Ä–æ–∫ –¥–æ—á–∫–µ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø–æ–¥–∞—Ä–æ–∫ –ø–æ–¥—Ä–æ—Å—Ç–∫—É –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –ö–í–ï–°–¢–´ –ò –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  '–¥–µ—Ç—Å–∫–∏–π –∫–≤–µ—Å—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –¥–µ—Ç–µ–π –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–¥–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –í–û–ó–†–ê–°–¢–ù–´–ï –ì–†–£–ü–ü–´ (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  '–¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ª–µ—Ç –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–¥–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≥–æ–¥ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–≥–¥–µ –æ—Ç–º–µ—Ç–∏—Ç—å –¥—Ä —Ä–µ–±–µ–Ω–∫–∞ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ü–†–ê–ó–î–ù–ò–ö–û–í (6 —Å—Ç—Ä–∞–Ω–∏—Ü)
  '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–µ',
  '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–µ',
  '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ –¥–µ—Ç—Å–∫–æ–º —Å–∞–¥—É –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
  '—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–µ—Ç—Å–∫–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',

  // –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
  '–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ä–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫'
];

function createZelenodolskKidsPageComponent(keyword) {
  // –°–æ–∑–¥–∞–µ–º URL –±–µ–∑ —Å–ª–æ–≤–∞ "–∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫"
  const baseKeyword = keyword.replace(' –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫', '').replace(' –≤ –∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–µ', '');
  const cleanKeyword = transliterate(baseKeyword)
    .replace(/[^a-zA-Z0-9]/g, '-')
    .split('-')
    .filter(word => word.length > 0)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');

  const componentName = cleanKeyword + 'ZelenodolskKidsPage';
  
  // URL —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º -zelenodolsk
  const urlKeyword = transliterate(baseKeyword)
    .replace(/[^a-zA-Z0-9\s]/g, '')
    .trim()
    .replace(/\s+/g, '-')
    .toLowerCase();
  
  const url = `/${urlKeyword}-zelenodolsk`;

  const componentContent = `/**
 * @file: ${componentName}.tsx
 * @description: SEO-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è "${keyword}"
 * @dependencies: KidsPageTemplate, SEO utils
 * @created: ${new Date().toISOString().split('T')[0]}
 */

import React from 'react'
import { KidsPageTemplate } from '../../components/seo/KidsPageTemplate'

const ${componentName}: React.FC = () => {
  return (
    <KidsPageTemplate 
      keyword="${keyword}"
      city="–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫"
    />
  )
}

export default ${componentName}`;

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  const filePath = path.join(__dirname, '../src/pages/zelenodolsk-kids-seo', `${componentName}.tsx`);
  fs.writeFileSync(filePath, componentContent);
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`);
  
  return {
    componentName,
    keyword,
    url,
    fileName: `${componentName}.tsx`
  };
}

// –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–∏—Ö –¥–µ—Ç—Å–∫–∏—Ö SEO-—Å—Ç—Ä–∞–Ω–∏—Ü...\n');

const results = zelenodolskKidsKeywords.map(createZelenodolskKidsPageComponent);

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
const indexContent = `/**
 * @file: index.ts  
 * @description: –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫–∏—Ö –¥–µ—Ç—Å–∫–∏—Ö SEO-—Å—Ç—Ä–∞–Ω–∏—Ü
 * @created: ${new Date().toISOString().split('T')[0]}
 */

${results.map(({ componentName, fileName }) => 
  `export { default as ${componentName} } from './${fileName.replace('.tsx', '')}'`
).join('\n')}
`;

fs.writeFileSync(path.join(__dirname, '../src/pages/zelenodolsk-kids-seo/index.ts'), indexContent);

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
const routesContent = results.map(({ componentName, url }) => 
  `<Route path="${url}" element={<ProtectedRoute requireAuth={false}><AppShell padding="md"><AppShell.Main style={{ paddingBottom: '120px' }}><${componentName} /></AppShell.Main><TelegramBottomNav /></AppShell></ProtectedRoute>} />`
).join('\n');

fs.writeFileSync(path.join(__dirname, 'zelenodolsk-kids-routes.txt'), routesContent);

// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è sitemap
const sitemapEntries = results.map(({ url }) => `  <url>
    <loc>https://dimbopizza.ru${url}</loc>
    <lastmod>${new Date().toISOString().split('T')[0]}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>`).join('\n');

fs.writeFileSync(path.join(__dirname, 'zelenodolsk-kids-sitemap-entries.txt'), sitemapEntries);

// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è robots.txt
const robotsEntries = results.map(({ url }) => `Allow: ${url}`).join('\n');
fs.writeFileSync(path.join(__dirname, 'zelenodolsk-kids-robots-entries.txt'), robotsEntries);

console.log(`\nüéâ –ó–ï–õ–ï–ù–û–î–û–õ–¨–°–ö–ò–ï –î–ï–¢–°–ö–ò–ï SEO-–°–¢–†–ê–ù–ò–¶–´ –°–û–ó–î–ê–ù–´!`);
console.log(`üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${results.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
console.log(`üìÅ –ü–∞–ø–∫–∞: src/pages/zelenodolsk-kids-seo/`);
console.log(`üìÑ –§–∞–π–ª—ã: zelenodolsk-kids-routes.txt, zelenodolsk-kids-sitemap-entries.txt, zelenodolsk-kids-robots-entries.txt`);
console.log(`\nüîó –ü—Ä–∏–º–µ—Ä—ã URL:`);
results.slice(0, 5).forEach(({ url, keyword }) => {
  console.log(`   ${url} - ${keyword}`);
});
if (results.length > 5) {
  console.log(`   ... –∏ –µ—â–µ ${results.length - 5} —Å—Ç—Ä–∞–Ω–∏—Ü`);
}
